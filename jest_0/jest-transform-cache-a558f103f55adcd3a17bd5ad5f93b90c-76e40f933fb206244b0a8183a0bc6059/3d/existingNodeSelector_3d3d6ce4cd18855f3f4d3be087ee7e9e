810c7f68c040debc172b950f2935d9fe
"use strict";

var _interopRequireDefault = require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExistingNodeSelector = void 0;

var _objectSpread2 = _interopRequireDefault(require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _requiresLogin = _interopRequireDefault(require("./requires-login"));

var _nodes = require("../actions/nodes");

var _jsxFileName = "/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/src/components/existingNodeSelector.js";

class ExistingNodeSelector extends _react.default.Component {
  componentDidMount() {
    const currentNodeRemoved = this.filterCurrentNodeFromPotentialChildren(); //  this dispatch blocks against staged child node being null, and if there is only one value 
    //  to select from, you cannot select it.

    this.props.dispatch((0, _nodes.stageChildNode)(currentNodeRemoved[0]));
  }

  filterCurrentNodeFromPotentialChildren() {
    // adds index to node object to be used after filter 
    const nodesWithIndexArray = this.props.currentAdventure.nodes.map((node, index) => {
      const nodeWithIndex = (0, _objectSpread2.default)({}, node, {
        index
      });
      return nodeWithIndex;
    }); // filters out current node to avoid a node answer pointing to itself

    const currentNodeRemoved = nodesWithIndexArray.filter(node => node.id !== this.props.currentNode.id);
    return currentNodeRemoved;
  }

  stageSelectedChildNode(index) {
    let node = this.props.currentAdventure.nodes[index];
    this.props.dispatch((0, _nodes.stageChildNode)(node));
  }

  linkNodes() {
    let idObjectWithParentInt = {
      adventureId: this.props.currentAdventure.id,
      parentId: this.props.currentNode.id,
      childId: this.props.stagedChildNode.id,
      parentInt: this.props.parentInt
    };
    this.props.dispatch((0, _nodes.linkNodesById)(idObjectWithParentInt));
  }

  toggleNewOrExistingNodeForm() {
    this.props.dispatch((0, _nodes.toggleChildType)());
  }

  render() {
    let parentAnswer;

    if (this.props.parentInt === 1) {
      parentAnswer = this.props.currentNode.answerA;
    }

    if (this.props.parentInt === 2) {
      parentAnswer = this.props.currentNode.answerB;
    }

    if (this.props.parentInt === 3) {
      parentAnswer = this.props.currentNode.answerC;
    }

    if (this.props.parentInt === 4) {
      parentAnswer = this.props.currentNode.answerD;
    }

    const currentNodeRemoved = this.filterCurrentNodeFromPotentialChildren(); // generates JSX of options with values that point to index of itself in currentAdventure.nodes

    const options = currentNodeRemoved.map(node => {
      if (node.title) {
        return _react.default.createElement("option", {
          key: node.id,
          label: node.title,
          value: node.index,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 72
          },
          __self: this
        }, node.question);
      } // this else is temporary(?) until all nodes have titles
      else {
          return _react.default.createElement("option", {
            key: node.id,
            label: node.question,
            value: node.index,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            },
            __self: this
          }, node.question);
        }
    });
    return _react.default.createElement("div", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81
      },
      __self: this
    }, _react.default.createElement("h3", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82
      },
      __self: this
    }, "Use Existing Node as Child"), _react.default.createElement("h4", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83
      },
      __self: this
    }, "answer that points to this node: ", parentAnswer), _react.default.createElement("button", {
      onClick: () => this.toggleNewOrExistingNodeForm(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84
      },
      __self: this
    }, "Create New Node Instead"), _react.default.createElement("p", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 86
      },
      __self: this
    }), _react.default.createElement("select", {
      className: "node-select",
      label: "Select an existing node as a child",
      name: "nodeSelect",
      options: options,
      onChange: e => this.stageSelectedChildNode(e.target.value),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87
      },
      __self: this
    }, options), _react.default.createElement("button", {
      onClick: () => this.linkNodes(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 92
      },
      __self: this
    }, "Create Connection"));
  }

}

exports.ExistingNodeSelector = ExistingNodeSelector;

const mapStateToProps = state => {
  const currentUser = state.auth.currentUser;
  return {
    username: state.auth.currentUser.username,
    name: `${currentUser.firstName} ${currentUser.lastName}`,
    currentAdventure: state.adventure.currentAdventure,
    parentInt: state.node.parentInt,
    loading: state.adventure.loading,
    currentNode: state.node.currentNode,
    adventureId: state.adventure.currentAdventure.id,
    parentId: state.node.currentNode.id,
    stagedChildNode: state.node.stagedChildNode
  };
};

var _default = (0, _requiresLogin.default)()((0, _reactRedux.connect)(mapStateToProps)(ExistingNodeSelector));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,