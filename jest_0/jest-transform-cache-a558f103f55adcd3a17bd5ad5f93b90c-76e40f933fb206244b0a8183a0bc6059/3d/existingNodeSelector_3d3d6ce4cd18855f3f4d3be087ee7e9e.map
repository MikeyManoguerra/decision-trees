{"version":3,"sources":["existingNodeSelector.js"],"names":["ExistingNodeSelector","React","Component","componentDidMount","currentNodeRemoved","filterCurrentNodeFromPotentialChildren","props","dispatch","nodesWithIndexArray","currentAdventure","nodes","map","node","index","nodeWithIndex","filter","id","currentNode","stageSelectedChildNode","linkNodes","idObjectWithParentInt","adventureId","parentId","childId","stagedChildNode","parentInt","toggleNewOrExistingNodeForm","render","parentAnswer","answerA","answerB","answerC","answerD","options","title","question","e","target","value","mapStateToProps","state","currentUser","auth","username","name","firstName","lastName","adventure","loading"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport requiresLogin from './requires-login';\nimport { toggleChildType, stageChildNode, linkNodesById } from '../actions/nodes'\n\nexport class ExistingNodeSelector extends React.Component {\n\n  componentDidMount() {\n    const currentNodeRemoved = this.filterCurrentNodeFromPotentialChildren()\n    //  this dispatch blocks against staged child node being null, and if there is only one value \n    //  to select from, you cannot select it.\n    this.props.dispatch(stageChildNode(currentNodeRemoved[0]))\n  }\n\n  filterCurrentNodeFromPotentialChildren() {\n    // adds index to node object to be used after filter \n    const nodesWithIndexArray = this.props.currentAdventure.nodes.map((node, index) => {\n      const nodeWithIndex = { ...node, index }\n      return nodeWithIndex;\n    });\n\n    // filters out current node to avoid a node answer pointing to itself\n    const currentNodeRemoved = nodesWithIndexArray.filter(node =>\n      node.id !== this.props.currentNode.id\n    )\n    return currentNodeRemoved\n  }\n\n\n  stageSelectedChildNode(index) {\n    let node = this.props.currentAdventure.nodes[index];\n    this.props.dispatch(stageChildNode(node))\n\n  }\n\n  linkNodes() {\n    let idObjectWithParentInt = {\n      adventureId: this.props.currentAdventure.id,\n      parentId: this.props.currentNode.id,\n      childId: this.props.stagedChildNode.id,\n      parentInt: this.props.parentInt,\n    }\n    this.props.dispatch(linkNodesById(idObjectWithParentInt))\n\n  }\n\n  toggleNewOrExistingNodeForm() {\n    this.props.dispatch(toggleChildType())\n  }\n\n  render() {\n    let parentAnswer;\n    if (this.props.parentInt === 1) {\n      parentAnswer = this.props.currentNode.answerA\n    }\n    if (this.props.parentInt === 2) {\n      parentAnswer = this.props.currentNode.answerB\n    }\n    if (this.props.parentInt === 3) {\n      parentAnswer = this.props.currentNode.answerC\n    }\n    if (this.props.parentInt === 4) {\n      parentAnswer = this.props.currentNode.answerD\n    }\n\n\n    const currentNodeRemoved = this.filterCurrentNodeFromPotentialChildren()\n\n    // generates JSX of options with values that point to index of itself in currentAdventure.nodes\n    const options = currentNodeRemoved.map((node) => {\n      if (node.title) {\n        return <option key={node.id} label={node.title} value={node.index}>{node.question}</option>\n      }\n      // this else is temporary(?) until all nodes have titles\n      else {\n        return <option key={node.id} label={node.question} value={node.index}>{node.question}</option>\n      }\n    });\n\n    return (\n      <div>\n        <h3>Use Existing Node as Child</h3>\n        <h4>answer that points to this node: {parentAnswer}</h4>\n        <button onClick={() => this.toggleNewOrExistingNodeForm()}>Create New Node Instead</button>\n        {/* TODO : VVV bad */}\n        <p></p>\n        <select className=\"node-select\"\n          label=\"Select an existing node as a child\"\n          name=\"nodeSelect\"\n          options={options}\n          onChange={e => this.stageSelectedChildNode(e.target.value)}>{options}</select>\n        <button onClick={() => this.linkNodes()}>Create Connection</button>\n\n      </div>\n\n\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.auth;\n  return {\n    username: state.auth.currentUser.username,\n    name: `${currentUser.firstName} ${currentUser.lastName}`,\n    currentAdventure: state.adventure.currentAdventure,\n    parentInt: state.node.parentInt,\n    loading: state.adventure.loading,\n    currentNode: state.node.currentNode,\n    adventureId: state.adventure.currentAdventure.id,\n    parentId: state.node.currentNode.id,\n    stagedChildNode: state.node.stagedChildNode\n  };\n};\n\nexport default requiresLogin()(connect(mapStateToProps)(ExistingNodeSelector));\n"]}