92c58b0bfd5bfb9d25008b62c1e7f50f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateNode = exports.linkNodesById = exports.deleteNode = exports.createNode = exports.toggleEnding = exports.TOGGLE_ENDING = exports.toggleNodeDeleting = exports.TOGGLE_NODE_DELETING = exports.deleteNodeError = exports.DELETE_NODE_ERROR = exports.deleteNodeSuccess = exports.DELETE_NODE_SUCCESS = exports.deleteNodeRequest = exports.DELETE_NODE_REQUEST = exports.updateNodeError = exports.UPDATE_NODE_ERROR = exports.updateNodeSuccess = exports.UPDATE_NODE_SUCCESS = exports.updateNodeRequest = exports.UPDATE_NODE_REQUEST = exports.toggleUpdateForm = exports.TOGGLE_UPDATE_FORM = exports.createNodeError = exports.CREATE_NODE_ERROR = exports.createNodeSuccess = exports.CREATE_NODE_SUCCESS = exports.createNodeRequest = exports.CREATE_NODE_REQUEST = exports.setCurrentNode = exports.SET_CURRENT_NODE = exports.toggleChildType = exports.TOGGLE_CHILD_TYPE = exports.stageChildNode = exports.STAGE_CHILD_NODE = exports.nodeFormWithPointer = exports.NODE_FORM_WITH_POINTER = void 0;

var _config = require("../config");

var _utils = require("../utils");

var _createAdventure = require("./createAdventure");

const NODE_FORM_WITH_POINTER = 'NODE_FORM_WITH_POINTER';
exports.NODE_FORM_WITH_POINTER = NODE_FORM_WITH_POINTER;

const nodeFormWithPointer = parentInt => {
  return {
    type: NODE_FORM_WITH_POINTER,
    parentInt
  };
};

exports.nodeFormWithPointer = nodeFormWithPointer;
const STAGE_CHILD_NODE = 'STAGE_CHILD_NODE';
exports.STAGE_CHILD_NODE = STAGE_CHILD_NODE;

const stageChildNode = node => ({
  type: STAGE_CHILD_NODE,
  node
});

exports.stageChildNode = stageChildNode;
const TOGGLE_CHILD_TYPE = 'TOGGLE_CHILD_TYPE';
exports.TOGGLE_CHILD_TYPE = TOGGLE_CHILD_TYPE;

const toggleChildType = () => ({
  type: TOGGLE_CHILD_TYPE
}); // set current node will now also normalize isEnding in state to it so they are in  sync


exports.toggleChildType = toggleChildType;
const SET_CURRENT_NODE = 'SET_CURRENT_NODE';
exports.SET_CURRENT_NODE = SET_CURRENT_NODE;

const setCurrentNode = node => ({
  type: SET_CURRENT_NODE,
  node
});

exports.setCurrentNode = setCurrentNode;
const CREATE_NODE_REQUEST = 'CREATE_NODE_REQUEST';
exports.CREATE_NODE_REQUEST = CREATE_NODE_REQUEST;

const createNodeRequest = () => ({
  type: CREATE_NODE_REQUEST
});

exports.createNodeRequest = createNodeRequest;
const CREATE_NODE_SUCCESS = 'CREATE_NODE_SUCCESS';
exports.CREATE_NODE_SUCCESS = CREATE_NODE_SUCCESS;

const createNodeSuccess = nodeId => ({
  type: CREATE_NODE_SUCCESS,
  nodeId
});

exports.createNodeSuccess = createNodeSuccess;
const CREATE_NODE_ERROR = 'CREATE_NODE_ERROR';
exports.CREATE_NODE_ERROR = CREATE_NODE_ERROR;

const createNodeError = error => ({
  type: CREATE_NODE_ERROR,
  error
});

exports.createNodeError = createNodeError;
const TOGGLE_UPDATE_FORM = 'TOGGLE_UPDATE_FORM';
exports.TOGGLE_UPDATE_FORM = TOGGLE_UPDATE_FORM;

const toggleUpdateForm = nodeId => ({
  type: TOGGLE_UPDATE_FORM,
  nodeId
});

exports.toggleUpdateForm = toggleUpdateForm;
const UPDATE_NODE_REQUEST = 'UPDATE_NODE_REQUEST';
exports.UPDATE_NODE_REQUEST = UPDATE_NODE_REQUEST;

const updateNodeRequest = () => ({
  type: UPDATE_NODE_REQUEST
});

exports.updateNodeRequest = updateNodeRequest;
const UPDATE_NODE_SUCCESS = 'UPDATE_NODE_SUCCESS';
exports.UPDATE_NODE_SUCCESS = UPDATE_NODE_SUCCESS;

const updateNodeSuccess = nodeId => ({
  type: UPDATE_NODE_SUCCESS,
  nodeId
});

exports.updateNodeSuccess = updateNodeSuccess;
const UPDATE_NODE_ERROR = 'UPDATE_NODE_ERROR';
exports.UPDATE_NODE_ERROR = UPDATE_NODE_ERROR;

const updateNodeError = error => ({
  type: UPDATE_NODE_ERROR,
  error
});

exports.updateNodeError = updateNodeError;
const DELETE_NODE_REQUEST = 'DELETE_NODE_REQUEST';
exports.DELETE_NODE_REQUEST = DELETE_NODE_REQUEST;

const deleteNodeRequest = () => ({
  type: DELETE_NODE_REQUEST
});

exports.deleteNodeRequest = deleteNodeRequest;
const DELETE_NODE_SUCCESS = 'DELETE_NODE_SUCCESS';
exports.DELETE_NODE_SUCCESS = DELETE_NODE_SUCCESS;

const deleteNodeSuccess = nodeId => ({
  type: DELETE_NODE_SUCCESS,
  nodeId
});

exports.deleteNodeSuccess = deleteNodeSuccess;
const DELETE_NODE_ERROR = 'DELETE_NODE_ERROR';
exports.DELETE_NODE_ERROR = DELETE_NODE_ERROR;

const deleteNodeError = error => ({
  type: DELETE_NODE_ERROR,
  error
});

exports.deleteNodeError = deleteNodeError;
const TOGGLE_NODE_DELETING = 'TOGGLE_NODE_DELETING';
exports.TOGGLE_NODE_DELETING = TOGGLE_NODE_DELETING;

const toggleNodeDeleting = () => ({
  type: TOGGLE_NODE_DELETING
});

exports.toggleNodeDeleting = toggleNodeDeleting;
const TOGGLE_ENDING = 'TOGGLE_ENDING';
exports.TOGGLE_ENDING = TOGGLE_ENDING;

const toggleEnding = () => ({
  type: TOGGLE_ENDING
});

exports.toggleEnding = toggleEnding;

const createNode = nodeData => (dispatch, getState) => {
  let nodeId;
  dispatch(createNodeRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/newNode`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify(nodeData)
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    if (nodeData.parentId) {
      nodeId = nodeData.parentId;
    } else nodeId = res.createdNode.id;

    return dispatch((0, _createAdventure.updateAdventureById)(res.adventureId));
  }).then(adventure => {
    const updatedNode = getNodeFromCurrentAdventure(nodeId, adventure);
    dispatch(setCurrentNode(updatedNode));
    return dispatch(createNodeSuccess(nodeId));
  }).catch(err => {
    dispatch(createNodeError(err));
  });
};

exports.createNode = createNode;

const deleteNode = (adventureId, nodeId) => (dispatch, getState) => {
  dispatch(deleteNodeRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${adventureId}/${nodeId}`, {
    method: 'DELETE',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    }
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(() => {
    return dispatch((0, _createAdventure.updateAdventureById)(adventureId));
  }).then(adventure => {
    dispatch(setCurrentNode(adventure.head));
    return dispatch(deleteNodeSuccess()); // sets showUpdate to false in reducer
  }).catch(err => {
    dispatch(deleteNodeError(err));
  });
};

exports.deleteNode = deleteNode;

const linkNodesById = idObjectWithParentInt => (dispatch, getState) => {
  let adventureId = idObjectWithParentInt.adventureId;
  let nodeId = idObjectWithParentInt.parentId;
  dispatch(updateNodeRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/linkNodes`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify(idObjectWithParentInt)
  }).then(() => {
    return dispatch((0, _createAdventure.updateAdventureById)(adventureId));
  }).then(adventure => {
    const updatedNode = getNodeFromCurrentAdventure(nodeId, adventure);
    dispatch(setCurrentNode(updatedNode));
    return dispatch(updateNodeSuccess());
  }).catch(err => {
    dispatch(createNodeError(err));
  });
};

exports.linkNodesById = linkNodesById;

const updateNode = nodeData => (dispatch, getState) => {
  let nodeId = nodeData.nodeId;
  dispatch(updateNodeRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${nodeData.adventureId}/${nodeData.nodeId}`, {
    method: 'PUT',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify(nodeData)
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(() => {
    // console.log("New Node From Backend is: ", res)
    // return dispatch(getAdventureById(node.adventureId));
    dispatch(toggleUpdateForm());
    return dispatch((0, _createAdventure.updateAdventureById)(nodeData.adventureId));
  }).then(adventure => {
    const updatedNode = getNodeFromCurrentAdventure(nodeId, adventure);
    dispatch(setCurrentNode(updatedNode));
    return dispatch(updateNodeSuccess());
  }).catch(err => {
    dispatch(createNodeError(err));
  });
}; // helper fn to find node in adventure


exports.updateNode = updateNode;

function getNodeFromCurrentAdventure(nodeId, adventure) {
  console.log(nodeId, adventure);
  let nodeToReturn = adventure.nodes.find(node => node.id === nodeId);
  console.log(nodeToReturn);
  return nodeToReturn;
} // export const UPDATE_CURRENT_NODE = 'UPDATE_CURRENT_NODE';
// export const updateCurrentNode = (nodeId, nodeArr) => ({
//   type: UPDATE_CURRENT_NODE,
//   nodeId,
//   nodeArr
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,