{"version":3,"sources":["new-node-form.js"],"names":["NewNodeForm","React","Component","renderCheckBox","input","label","value","e","checked","onChange","toggleIsEnding","props","dispatch","toggleNewOrExistingNodeForm","onSubmit","values","parentInt","adventureId","parentId","title","question","answerA","answerB","answerC","answerD","videoURL","textContent","ending","newNode","then","_res","console","log","render","error","parentAnswer","currentNode","questions","isEnding","TextArea","required","nonEmpty","Input","handleSubmit","mapStateToProps","state","node","adventure","currentAdventure","id","form","onSubmitFail","errors"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, focus } from 'redux-form';\nimport Input from \"./input\";\nimport TextArea from \"./textarea\";\nimport { createNode, toggleEnding, setCurrentNode, toggleChildType } from '../actions/nodes';\nimport { required, nonEmpty } from \"../utils/validators\";\nimport { Checkbox, Form } from 'semantic-ui-react';\n\n\n\n\nclass NewNodeForm extends React.Component {\n  renderCheckBox = ({ input, label }) => {\n    return (\n      <Form.Field>\n        <Checkbox\n          autoFocus={true}\n          label={label}\n          checked={input.value ? true : false}\n          onChange={(e, { checked }) => {\n            input.onChange(checked)\n            this.toggleIsEnding()\n          }\n          }\n        />\n      </Form.Field>\n    );\n  };\n  toggleIsEnding() {\n    return this.props.dispatch(toggleEnding())\n  }\n  toggleNewOrExistingNodeForm() {\n    this.props.dispatch(toggleChildType())\n  }\n\n  onSubmit(values) {\n    const parentInt = this.props.parentInt;\n    const adventureId = this.props.adventureId;\n    const parentId = this.props.parentId;\n    let {title, question, answerA, answerB, answerC, answerD, videoURL, textContent, ending } = values;\n    let newNode = {\n      answerA,\n      answerB,\n      answerC,\n      answerD,\n      textContent,\n      videoURL,\n      question,\n      parentInt,\n      adventureId,\n      parentId,\n      ending,\n      title,\n    };\n    return this.props.dispatch(createNode(newNode))\n      .then(_res => {\n        console.log(_res)\n      })\n  }\n  render() {\n    let error;\n    if (this.props.error) {\n      error = (\n        <div className=\"form-error\" aria-live=\"polite\">\n          {this.props.error}\n        </div>\n      );\n    }\n    let parentAnswer;\n    if (this.props.parentInt === 1) {\n      parentAnswer = this.props.currentNode.answerA\n    }\n    if (this.props.parentInt === 2) {\n      parentAnswer = this.props.currentNode.answerB\n    }\n    if (this.props.parentInt === 3) {\n      parentAnswer = this.props.currentNode.answerC\n    }\n    if (this.props.parentInt === 4) {\n      parentAnswer = this.props.currentNode.answerD\n    }\n\n    let questions;\n    if (this.props.isEnding) {\n      questions = (\n        <Field\n          className=\"textContent\"\n          label=\"Ending Description\"\n          name=\"textContent\"\n          component={TextArea}\n          type=\"text\"\n          validate={[required, nonEmpty]} />\n      )\n    } else {\n      questions = (\n        <div className=\"questionAndAnswers\">\n          <Field\n            className=\"textContent\"\n            label=\"Scenario Description\"\n            name=\"textContent\"\n            component={TextArea}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"question\"\n            label=\"New Question\"\n            name=\"question\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"answer A\"\n            label=\"Answer A\"\n            name=\"answerA\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"answer B\"\n            placeholder=\"Optional\"\n            label=\"Answer B\"\n            name=\"answerB\"\n            component={Input}\n            type=\"text\"\n          />\n          <Field\n            className=\"answer C\"\n            placeholder=\"Optional\"\n            label=\"Answer C\"\n            name='answerC'\n            component={Input}\n            type=\"text\"\n          />\n          <Field\n            className=\"answer D\"\n            placeholder=\"Optional\"\n            label=\"Answer D\"\n            name=\"answerD\"\n            component={Input}\n            type=\"text\"\n          />\n        </div>\n      )\n    }\n\n    return (\n      <form onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n        <h3>Add A New Child Node</h3>\n        <h4>answer that points to this node: {parentAnswer}</h4>\n        <button\n          onClick={() => this.toggleNewOrExistingNodeForm()}>\n          Use existing node\n         </button>\n        {error}\n        <Field\n          className=\"end-checkbox\"\n          name=\"ending\"\n          label=\"Is this an Ending?\"\n          component={this.renderCheckBox}\n          type=\"checkbox\" />\n          <Field\n            className=\"title\"\n            label=\"New Title\"\n            name=\"title\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n        <Field\n          className=\"videoURL\"\n          label=\"Video URL (optional)\"\n          placeholder=\"http://(videoURL)\"\n          name=\"videoURL\"\n          component={Input}\n          type=\"text\" />\n        {questions}\n\n        <button>Add node to adventure</button>\n      </form>)\n  }\n}\n\nconst mapStateToProps = state => {\n\n  return {\n    currentNode: state.node.currentNode,\n    parentInt: state.node.parentInt,\n    adventureId: state.adventure.currentAdventure.id,\n    parentId: state.node.currentNode.id,\n    isEnding: state.node.isEnding\n  };\n};\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: 'NewNode',\n  onSubmitFail: (errors, dispatch) =>\n    dispatch(focus('Adventure'/*, Object.keys(errors)[0]*/\n    ))\n})(NewNodeForm));"]}