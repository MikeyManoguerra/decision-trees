fbfbc5996f9a5448b29569478fdfde1b
"use strict";

var _interopRequireDefault = require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reduxForm = require("redux-form");

var _input = _interopRequireDefault(require("./input"));

var _textarea = _interopRequireDefault(require("./textarea"));

var _nodes = require("../actions/nodes");

var _validators = require("../utils/validators");

var _semanticUiReact = require("semantic-ui-react");

var _jsxFileName = "/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/src/components/new-node-form.js";

class NewNodeForm extends _react.default.Component {
  constructor(...args) {
    super(...args);

    this.renderCheckBox = ({
      input,
      label
    }) => {
      return _react.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 16
        },
        __self: this
      }, _react.default.createElement(_semanticUiReact.Checkbox, {
        autoFocus: true,
        label: label,
        checked: input.value ? true : false,
        onChange: (e, {
          checked
        }) => {
          input.onChange(checked);
          this.toggleIsEnding();
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        },
        __self: this
      }));
    };
  }

  toggleIsEnding() {
    return this.props.dispatch((0, _nodes.toggleEnding)());
  }

  toggleNewOrExistingNodeForm() {
    this.props.dispatch((0, _nodes.toggleChildType)());
  }

  onSubmit(values) {
    const parentInt = this.props.parentInt;
    const adventureId = this.props.adventureId;
    const parentId = this.props.parentId;
    let title = values.title,
        question = values.question,
        answerA = values.answerA,
        answerB = values.answerB,
        answerC = values.answerC,
        answerD = values.answerD,
        videoURL = values.videoURL,
        textContent = values.textContent,
        ending = values.ending;
    let newNode = {
      answerA,
      answerB,
      answerC,
      answerD,
      textContent,
      videoURL,
      question,
      parentInt,
      adventureId,
      parentId,
      ending,
      title
    };
    return this.props.dispatch((0, _nodes.createNode)(newNode)).then(_res => {
      console.log(_res);
    });
  }

  render() {
    let error;

    if (this.props.error) {
      error = _react.default.createElement("div", {
        className: "form-error",
        "aria-live": "polite",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        },
        __self: this
      }, this.props.error);
    }

    let parentAnswer;

    if (this.props.parentInt === 1) {
      parentAnswer = this.props.currentNode.answerA;
    }

    if (this.props.parentInt === 2) {
      parentAnswer = this.props.currentNode.answerB;
    }

    if (this.props.parentInt === 3) {
      parentAnswer = this.props.currentNode.answerC;
    }

    if (this.props.parentInt === 4) {
      parentAnswer = this.props.currentNode.answerD;
    }

    let questions;

    if (this.props.isEnding) {
      questions = _react.default.createElement(_reduxForm.Field, {
        className: "textContent",
        label: "Ending Description",
        name: "textContent",
        component: _textarea.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        },
        __self: this
      });
    } else {
      questions = _react.default.createElement("div", {
        className: "questionAndAnswers",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 97
        },
        __self: this
      }, _react.default.createElement(_reduxForm.Field, {
        className: "textContent",
        label: "Scenario Description",
        name: "textContent",
        component: _textarea.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "question",
        label: "New Question",
        name: "question",
        component: _input.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer A",
        label: "Answer A",
        name: "answerA",
        component: _input.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer B",
        placeholder: "Optional",
        label: "Answer B",
        name: "answerB",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer C",
        placeholder: "Optional",
        label: "Answer C",
        name: "answerC",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 127
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer D",
        placeholder: "Optional",
        label: "Answer D",
        name: "answerD",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 135
        },
        __self: this
      }));
    }

    return _react.default.createElement("form", {
      onSubmit: this.props.handleSubmit(values => this.onSubmit(values)),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 148
      },
      __self: this
    }, _react.default.createElement("h3", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 149
      },
      __self: this
    }, "Add A New Child Node"), _react.default.createElement("h4", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 150
      },
      __self: this
    }, "answer that points to this node: ", parentAnswer), _react.default.createElement("button", {
      onClick: () => this.toggleNewOrExistingNodeForm(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 151
      },
      __self: this
    }, "Use existing node"), error, _react.default.createElement(_reduxForm.Field, {
      className: "end-checkbox",
      name: "ending",
      label: "Is this an Ending?",
      component: this.renderCheckBox,
      type: "checkbox",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 156
      },
      __self: this
    }), _react.default.createElement(_reduxForm.Field, {
      className: "title",
      label: "New Title",
      name: "title",
      component: _input.default,
      type: "text",
      validate: [_validators.required, _validators.nonEmpty],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 162
      },
      __self: this
    }), _react.default.createElement(_reduxForm.Field, {
      className: "videoURL",
      label: "Video URL (optional)",
      placeholder: "http://(videoURL)",
      name: "videoURL",
      component: _input.default,
      type: "text",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 169
      },
      __self: this
    }), questions, _react.default.createElement("button", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 178
      },
      __self: this
    }, "Add node to adventure"));
  }

}

const mapStateToProps = state => {
  return {
    currentNode: state.node.currentNode,
    parentInt: state.node.parentInt,
    adventureId: state.adventure.currentAdventure.id,
    parentId: state.node.currentNode.id,
    isEnding: state.node.isEnding
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)((0, _reduxForm.reduxForm)({
  form: 'NewNode',
  onSubmitFail: (errors, dispatch) => dispatch((0, _reduxForm.focus)('Adventure'
  /*, Object.keys(errors)[0]*/
  ))
})(NewNodeForm));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,