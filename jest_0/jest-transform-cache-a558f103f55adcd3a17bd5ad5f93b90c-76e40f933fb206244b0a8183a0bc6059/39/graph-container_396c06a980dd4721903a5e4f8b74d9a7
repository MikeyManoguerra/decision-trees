a25e5f18b892069828eb181d45853f61
"use strict";

var _interopRequireDefault = require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactD3Graph = require("react-d3-graph");

var _nodes = require("../actions/nodes");

var _createAdventure = require("../actions/createAdventure");

var _jsxFileName = "/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/src/components/graph-container.js";

class GraphContainer extends _react.default.Component {
  constructor(props) {
    super(props);

    this.handleResize = () => {
      let windowHeight = window.innerHeight;
      let windowWidth = window.innerWidth;
      this.setState({
        windowHeight,
        windowWidth
      });
    };

    this.state = {
      windowHeight: window.innerHeight,
      windowWidth: window.innerWidth
    };
  }

  onClickNode(nodeId) {
    let nodeArr = this.props.nodez.filter(node => node.id === nodeId);
    this.props.dispatch((0, _nodes.setCurrentNode)(nodeArr[0]));
    console.log("reRender is: ", this.props.reRender); // this.props.dispatch(reRenderGraph())
  }

  getFullNode(nodeId) {
    //get full node is outside of the class due to *this* being binded to the graph
    const nodeArr = this.props.nodez.filter(node => node.id === nodeId);
    return nodeArr[0];
  }

  populateGraph() {
    let chartData = {
      nodes: [],
      links: []
    };

    for (let i = 0; i < this.props.nodez.length; i++) {
      if (i === 0) {
        chartData.nodes.push({
          id: this.props.nodez[i].id,
          title: this.props.nodez[i].title ? this.props.nodez[i].title : this.props.nodez[i].question,
          color: '#9D601B',
          symbolType: "triangle"
        });

        if (this.props.nodez[i].pointerA) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerA
          });
        }

        if (this.props.nodez[i].pointerB) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerB
          });
        }

        if (this.props.nodez[i].pointerC) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerC
          });
        }

        if (this.props.nodez[i].pointerD) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerD
          });
        }
      } else {
        chartData.nodes.push({
          id: this.props.nodez[i].id,
          title: this.props.nodez[i].title ? this.props.nodez[i].title : this.props.nodez[i].question,
          color: this.props.nodez[i].ending ? '#51646b' : '#b4cedd',
          symbolType: this.props.nodez[i].ending ? "square" : "circle"
        });

        if (this.props.nodez[i].pointerA) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerA
          });
        }

        if (this.props.nodez[i].pointerB) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerB
          });
        }

        if (this.props.nodez[i].pointerC) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerC
          });
        }

        if (this.props.nodez[i].pointerD) {
          chartData.links.push({
            source: this.props.nodez[i].id,
            target: this.props.nodez[i].pointerD
          });
        }
      }
    }

    chartData.nodes[0].x = this.state.windowWidth / 2;
    chartData.nodes[0].y = this.state.windowHeight / 2;
    return chartData;
  }

  resizeGraph() {
    let cyStyle = {
      margin: 'auto',
      border: '1px solid lightgreen'
    };
    cyStyle.maxHeight = Math.max(this.state.windowHeight * .5, 500);
    cyStyle.maxWidth = Math.max(this.state.windowWidth * .8, 300);
    return cyStyle;
  } //if you change this from an arrow function, this.setState fails


  componentDidMount() {
    window.addEventListener("resize", this.handleResize);
  }

  componentWillMount() {
    this.populateGraph();
    this.resizeGraph();
  }

  componentWillUnmount() {
    window.removeEventListener("resize", this.handleResize);
  }

  render() {
    const myConfig = {
      nodeHighlightBehavior: true,
      directed: true,
      automaticRearrangeAfterDropNode: true,
      d3: {
        gravity: -300,
        linkLength: 120,
        forceManyBody: function strength() {
          return -1000;
        }
      },
      minZoom: .5,
      maxZoom: 1.5,
      height: Math.max(this.state.windowHeight * .5, 500),
      width: Math.max(this.state.windowWidth * .8, 300),
      //There are height and widths available here, but they're for the graph itself, not the container of the graph
      node: {
        fontSize: 18,
        color: 'lightgreen',
        size: 800,
        highlightStrokeColor: 'blue',
        labelProperty: 'title',
        highlightFontSize: 'same'
      },
      link: {
        highlightColor: 'lightblue',
        strokeWidth: 4
      }
    };

    if (!this.props.nodez) {
      return _react.default.createElement("div", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 134
        },
        __self: this
      }, "Loading....");
    } else {
      if (this.props.reRender) {
        return _react.default.createElement("div", {
          style: this.resizeGraph(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 138
          },
          __self: this
        }, " ", _react.default.createElement(_reactD3Graph.Graph, {
          props: this.props,
          id: "graph-id" // id is mandatory, if no id is defined rd3g will throw an error
          ,
          data: this.populateGraph(),
          config: myConfig,
          onClickNode: this.onClickNode // onRightClickNode={onRightClickNode}
          // onClickGraph={onClickGraph}
          // onClickLink={onClickLink}
          // onRightClickLink={onRightClickLink}
          // onMouseOverNode={onMouseOverNode}
          // onMouseOutNode={onMouseOutNode}
          // onMouseOverLink={onMouseOverLink}
          // onMouseOutLink={onMouseOutLink}
          ,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 139
          },
          __self: this
        }));
      } else {
        return _react.default.createElement("div", {
          style: this.resizeGraph(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 158
          },
          __self: this
        }, _react.default.createElement(_reactD3Graph.Graph, {
          props: this.props,
          id: "graph-id" // id is mandatory, if no id is defined rd3g will throw an error
          ,
          data: this.populateGraph(),
          config: myConfig,
          onClickNode: this.onClickNode // onRightClickNode={onRightClickNode}
          // onClickGraph={onClickGraph}
          // onClickLink={onClickLink}
          // onRightClickLink={onRightClickLink}
          // onMouseOverNode={onMouseOverNode}
          // onMouseOutNode={onMouseOutNode}
          // onMouseOverLink={onMouseOverLink}
          // onMouseOutLink={onMouseOutLink}
          ,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 159
          },
          __self: this
        }));
      }
    }
  }

}

const mapStateToProps = state => ({
  nodez: state.adventure.currentAdventure.nodes,
  showUpdate: state.node.showUpdate,
  currentNode: state.node.currentNode,
  reRender: state.adventure.reRender
}); // connect(mapStateToProps)(Graph)


var _default = (0, _reactRedux.connect)(mapStateToProps)(GraphContainer);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,