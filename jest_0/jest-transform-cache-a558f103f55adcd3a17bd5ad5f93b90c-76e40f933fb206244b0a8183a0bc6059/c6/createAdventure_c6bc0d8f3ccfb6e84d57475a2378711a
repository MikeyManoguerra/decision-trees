51167d6e7bb68262cc1798fd07fa1a33
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editAdventure = exports.editAdventureError = exports.EDIT_ADVENTURE_ERROR = exports.editAdventureSuccess = exports.EDIT_ADVENTURE_SUCCESS = exports.editAdventureRequest = exports.EDIT_ADVENTURE_REQUEST = exports.deleteAdventure = exports.getAllAdventures = exports.reRenderGraph = exports.RERENDER_GRAPH = exports.getAllAdventuresError = exports.GET_ALL_ADVENTURES_ERROR = exports.getAllAdventuresSuccess = exports.GET_ALL_ADVENTURES_SUCCESS = exports.getAllAdventuresRequest = exports.GET_ALL_ADVENTURES_REQUEST = exports.createAdventure = exports.updateAdventureById = exports.UPDATE_ADVENTURE_BY_ID = exports.getAdventureById = exports.GET_ADVENTURE_BY_ID = exports.deleteAdventureError = exports.DELETE_ADVENTURE_ERROR = exports.deleteAdventureSuccess = exports.DELETE_ADVENTURE_SUCCESS = exports.deleteAdventureRequest = exports.DELETE_ADVENTURE_REQUEST = exports.createAdventureError = exports.CREATE_ADVENTURE_ERROR = exports.getAdventureSuccess = exports.GET_ADVENTURE_SUCCESS = exports.createAdventureSuccess = exports.CREATE_ADVENTURE_SUCCESS = exports.createAdventureRequest = exports.CREATE_ADVENTURE_REQUEST = exports.toggleAnalyticsDisplay = exports.TOGGLE_ANALYTICS_DISPLAY = exports.toggleAdventureEditing = exports.TOGGLE_ADVENTURE_EDITING = exports.toggleAdventureDeleting = exports.TOGGLE_ADVENTURE_DELETING = void 0;

var _config = require("../config");

var _utils = require("../utils");

var _nodes = require("./nodes.js");

const TOGGLE_ADVENTURE_DELETING = 'TOGGLE_ADVENTURE_DELETING';
exports.TOGGLE_ADVENTURE_DELETING = TOGGLE_ADVENTURE_DELETING;

const toggleAdventureDeleting = () => ({
  type: TOGGLE_ADVENTURE_DELETING
});

exports.toggleAdventureDeleting = toggleAdventureDeleting;
const TOGGLE_ADVENTURE_EDITING = 'TOGGLE_ADVENTURE_EDITING';
exports.TOGGLE_ADVENTURE_EDITING = TOGGLE_ADVENTURE_EDITING;

const toggleAdventureEditing = () => ({
  type: TOGGLE_ADVENTURE_EDITING
});

exports.toggleAdventureEditing = toggleAdventureEditing;
const TOGGLE_ANALYTICS_DISPLAY = 'TOGGLE_ANALYTICS_DISPLAY';
exports.TOGGLE_ANALYTICS_DISPLAY = TOGGLE_ANALYTICS_DISPLAY;

const toggleAnalyticsDisplay = () => ({
  type: TOGGLE_ANALYTICS_DISPLAY
});

exports.toggleAnalyticsDisplay = toggleAnalyticsDisplay;
const CREATE_ADVENTURE_REQUEST = 'CREATE_ADVENTURE_REQUEST';
exports.CREATE_ADVENTURE_REQUEST = CREATE_ADVENTURE_REQUEST;

const createAdventureRequest = () => ({
  type: CREATE_ADVENTURE_REQUEST
});

exports.createAdventureRequest = createAdventureRequest;
const CREATE_ADVENTURE_SUCCESS = 'CREATE_ADVENTURE_SUCCESS';
exports.CREATE_ADVENTURE_SUCCESS = CREATE_ADVENTURE_SUCCESS;

const createAdventureSuccess = currentAdventure => ({
  type: CREATE_ADVENTURE_SUCCESS,
  currentAdventure
});

exports.createAdventureSuccess = createAdventureSuccess;
const GET_ADVENTURE_SUCCESS = 'GET_ADVENTURE_SUCCESS';
exports.GET_ADVENTURE_SUCCESS = GET_ADVENTURE_SUCCESS;

const getAdventureSuccess = currentAdventure => {
  return {
    type: GET_ADVENTURE_SUCCESS,
    currentAdventure
  };
};

exports.getAdventureSuccess = getAdventureSuccess;
const CREATE_ADVENTURE_ERROR = 'CREATE_ADVENTURE_ERROR';
exports.CREATE_ADVENTURE_ERROR = CREATE_ADVENTURE_ERROR;

const createAdventureError = error => ({
  type: CREATE_ADVENTURE_ERROR,
  error
});

exports.createAdventureError = createAdventureError;
const DELETE_ADVENTURE_REQUEST = 'DELETE_ADVENTURE_REQUEST';
exports.DELETE_ADVENTURE_REQUEST = DELETE_ADVENTURE_REQUEST;

const deleteAdventureRequest = () => ({
  type: DELETE_ADVENTURE_REQUEST
});

exports.deleteAdventureRequest = deleteAdventureRequest;
const DELETE_ADVENTURE_SUCCESS = 'DELETE_ADVENTURE_SUCCESS';
exports.DELETE_ADVENTURE_SUCCESS = DELETE_ADVENTURE_SUCCESS;

const deleteAdventureSuccess = adventureId => ({
  type: DELETE_ADVENTURE_SUCCESS,
  adventureId
});

exports.deleteAdventureSuccess = deleteAdventureSuccess;
const DELETE_ADVENTURE_ERROR = 'DELETE_ADVENTURE_ERROR';
exports.DELETE_ADVENTURE_ERROR = DELETE_ADVENTURE_ERROR;

const deleteAdventureError = error => ({
  type: DELETE_ADVENTURE_ERROR,
  error
});

exports.deleteAdventureError = deleteAdventureError;
const GET_ADVENTURE_BY_ID = 'GET_ADVENTURE_BY_ID';
exports.GET_ADVENTURE_BY_ID = GET_ADVENTURE_BY_ID;

const getAdventureById = adventureId => (dispatch, getState) => {
  dispatch(createAdventureRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${adventureId}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${authToken}`
    }
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    const headNode = getHeadNodefromAdventure(res);
    dispatch((0, _nodes.setCurrentNode)(headNode));
    dispatch(getAdventureSuccess(res));
  }).catch(error => {
    return dispatch(createAdventureError(error));
  });
};

exports.getAdventureById = getAdventureById;
const UPDATE_ADVENTURE_BY_ID = 'UPDATE_ADVENTURE_BY_ID';
exports.UPDATE_ADVENTURE_BY_ID = UPDATE_ADVENTURE_BY_ID;

const updateAdventureById = adventureId => (dispatch, getState) => {
  dispatch(createAdventureRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${adventureId}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${authToken}`
    }
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(adventure => {
    dispatch(getAdventureSuccess(adventure));
    return adventure;
  }).catch(error => {
    return dispatch(createAdventureError(error));
  });
}; // helper function that gets the head node from newadventure object


exports.updateAdventureById = updateAdventureById;

function getHeadNodefromAdventure(adventure) {
  const headNode = adventure.head;
  return headNode;
}

const createAdventure = adventure => (dispatch, getState) => {
  dispatch(createAdventureRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/newAdventure`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify(adventure)
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    // let headNode = getHeadNodefromAdventure(res)
    // dispatch(setCurrentNode(headNode))
    return dispatch(createAdventureSuccess(res));
  }).catch(error => {
    return dispatch(createAdventureError(error));
  });
};

exports.createAdventure = createAdventure;
const GET_ALL_ADVENTURES_REQUEST = 'GET_ALL_ADVENTURES_REQUEST';
exports.GET_ALL_ADVENTURES_REQUEST = GET_ALL_ADVENTURES_REQUEST;

const getAllAdventuresRequest = () => ({
  type: GET_ALL_ADVENTURES_REQUEST
});

exports.getAllAdventuresRequest = getAllAdventuresRequest;
const GET_ALL_ADVENTURES_SUCCESS = 'GET_ALL_ADVENTURES_SUCCESS';
exports.GET_ALL_ADVENTURES_SUCCESS = GET_ALL_ADVENTURES_SUCCESS;

const getAllAdventuresSuccess = adventures => ({
  type: GET_ALL_ADVENTURES_SUCCESS,
  adventures
});

exports.getAllAdventuresSuccess = getAllAdventuresSuccess;
const GET_ALL_ADVENTURES_ERROR = 'GET_ALL_ADVENTURES_ERROR';
exports.GET_ALL_ADVENTURES_ERROR = GET_ALL_ADVENTURES_ERROR;

const getAllAdventuresError = error => ({
  type: GET_ALL_ADVENTURES_ERROR,
  error
});

exports.getAllAdventuresError = getAllAdventuresError;
const RERENDER_GRAPH = 'RERENDER_GRAPH ';
exports.RERENDER_GRAPH = RERENDER_GRAPH;

const reRenderGraph = () => ({
  type: RERENDER_GRAPH
});

exports.reRenderGraph = reRenderGraph;

const getAllAdventures = () => (dispatch, getState) => {
  dispatch(createAdventureRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${authToken}`
    }
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => dispatch(getAllAdventuresSuccess(res))).catch(error => {
    dispatch(getAllAdventuresError(error));
  });
};

exports.getAllAdventures = getAllAdventures;

const deleteAdventure = adventureId => (dispatch, getState) => {
  dispatch(deleteAdventureRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${adventureId}/`, {
    method: 'DELETE',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    }
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    dispatch(deleteAdventureSuccess());
  }).catch(err => {
    dispatch(deleteAdventureError(err));
  });
};

exports.deleteAdventure = deleteAdventure;
const EDIT_ADVENTURE_REQUEST = 'EDIT_ADVENTURE_REQUEST';
exports.EDIT_ADVENTURE_REQUEST = EDIT_ADVENTURE_REQUEST;

const editAdventureRequest = () => ({
  type: EDIT_ADVENTURE_REQUEST
});

exports.editAdventureRequest = editAdventureRequest;
const EDIT_ADVENTURE_SUCCESS = 'EDIT_ADVENTURE_SUCCESS';
exports.EDIT_ADVENTURE_SUCCESS = EDIT_ADVENTURE_SUCCESS;

const editAdventureSuccess = currentAdventure => ({
  type: EDIT_ADVENTURE_SUCCESS,
  currentAdventure
});

exports.editAdventureSuccess = editAdventureSuccess;
const EDIT_ADVENTURE_ERROR = 'EDIT_ADVENTURE_ERROR';
exports.EDIT_ADVENTURE_ERROR = EDIT_ADVENTURE_ERROR;

const editAdventureError = error => ({
  type: EDIT_ADVENTURE_ERROR,
  error
});

exports.editAdventureError = editAdventureError;

const editAdventure = adventure => (dispatch, getState) => {
  dispatch(editAdventureRequest());
  let id = getState().adventure.currentAdventure.id;
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/adventure/${id}`, {
    method: 'PUT',
    headers: {
      Authorization: `Bearer ${authToken}`,
      'content-type': 'application/json'
    },
    body: JSON.stringify(adventure)
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    const headNode = getHeadNodefromAdventure(res);
    dispatch((0, _nodes.setCurrentNode)(headNode));
    return dispatch(editAdventureSuccess(res));
  }).catch(error => {
    return dispatch(editAdventureError(error));
  });
};

exports.editAdventure = editAdventure;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,