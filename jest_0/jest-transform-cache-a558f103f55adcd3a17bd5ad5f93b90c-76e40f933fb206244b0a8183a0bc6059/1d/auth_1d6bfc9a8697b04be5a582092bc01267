b21004bdd72d1eae018e2648c40e23ad
"use strict";

var _interopRequireDefault = require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.refreshAuthToken = exports.loginUser = exports.toggleOnboarding = exports.TOGGLE_ONBOARDING = exports.authError = exports.AUTH_ERROR = exports.authSuccess = exports.AUTH_SUCCESS = exports.authRequest = exports.AUTH_REQUEST = exports.clearAuth = exports.CLEAR_AUTH = exports.setAuthToken = exports.SET_AUTH_TOKEN = void 0;

var _jwtDecode = _interopRequireDefault(require("jwt-decode"));

var _reduxForm = require("redux-form");

var _config = require("../config");

var _normalizeResponseErrors = require("../utils/normalizeResponseErrors");

var _localStorage = require("../utils/local-storage");

const SET_AUTH_TOKEN = 'SET_AUTH_TOKEN';
exports.SET_AUTH_TOKEN = SET_AUTH_TOKEN;

const setAuthToken = authToken => ({
  type: SET_AUTH_TOKEN,
  authToken
});

exports.setAuthToken = setAuthToken;
const CLEAR_AUTH = 'CLEAR_AUTH';
exports.CLEAR_AUTH = CLEAR_AUTH;

const clearAuth = () => ({
  type: CLEAR_AUTH
});

exports.clearAuth = clearAuth;
const AUTH_REQUEST = 'AUTH_REQUEST';
exports.AUTH_REQUEST = AUTH_REQUEST;

const authRequest = () => ({
  type: AUTH_REQUEST
});

exports.authRequest = authRequest;
const AUTH_SUCCESS = 'AUTH_SUCCESS';
exports.AUTH_SUCCESS = AUTH_SUCCESS;

const authSuccess = currentUser => ({
  type: AUTH_SUCCESS,
  currentUser
});

exports.authSuccess = authSuccess;
const AUTH_ERROR = 'AUTH_ERROR';
exports.AUTH_ERROR = AUTH_ERROR;

const authError = error => ({
  type: AUTH_ERROR,
  error
});

exports.authError = authError;
const TOGGLE_ONBOARDING = 'TOGGLE_ONBOARDING';
exports.TOGGLE_ONBOARDING = TOGGLE_ONBOARDING;

const toggleOnboarding = () => ({
  type: TOGGLE_ONBOARDING
});

exports.toggleOnboarding = toggleOnboarding;

const storeAuthInfo = (authToken, dispatch) => {
  const decodedToken = (0, _jwtDecode.default)(authToken);
  dispatch(setAuthToken(authToken));
  dispatch(authSuccess(decodedToken.user));
  (0, _localStorage.saveAuthToken)(authToken);
};

const loginUser = user => dispatch => {
  dispatch(authRequest());
  return fetch(`${_config.API_BASE_URL}/auth/login`, {
    method: 'POST',
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify(user)
  }).then(res => (0, _normalizeResponseErrors.normalizeResponseErrors)(res)).then(res => res.json()).then(({
    authToken
  }) => storeAuthInfo(authToken, dispatch)).catch(err => {
    const code = err.code;
    const message = code === 401 ? 'Incorrect username or password' : 'Unable to login, please try again';
    dispatch(authError(err)); // Could not authenticate, so return a SubmissionError for Redux
    // Form

    return Promise.reject(new _reduxForm.SubmissionError({
      _error: message
    }));
  });
};

exports.loginUser = loginUser;

const refreshAuthToken = () => (dispatch, getState) => {
  dispatch(authRequest());
  const authToken = getState().auth.authToken;
  return fetch(`${_config.API_BASE_URL}/auth/refresh`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${authToken}`
    }
  }).then(res => (0, _normalizeResponseErrors.normalizeResponseErrors)(res)).then(res => res.json()).then(({
    authToken
  }) => storeAuthInfo(authToken, dispatch)).catch(err => {
    dispatch(authError(err));
    dispatch(clearAuth());
    (0, _localStorage.clearAuthToken)(authToken);
  });
};

exports.refreshAuthToken = refreshAuthToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGguanMiXSwibmFtZXMiOlsiU0VUX0FVVEhfVE9LRU4iLCJzZXRBdXRoVG9rZW4iLCJhdXRoVG9rZW4iLCJ0eXBlIiwiQ0xFQVJfQVVUSCIsImNsZWFyQXV0aCIsIkFVVEhfUkVRVUVTVCIsImF1dGhSZXF1ZXN0IiwiQVVUSF9TVUNDRVNTIiwiYXV0aFN1Y2Nlc3MiLCJjdXJyZW50VXNlciIsIkFVVEhfRVJST1IiLCJhdXRoRXJyb3IiLCJlcnJvciIsIlRPR0dMRV9PTkJPQVJESU5HIiwidG9nZ2xlT25ib2FyZGluZyIsInN0b3JlQXV0aEluZm8iLCJkaXNwYXRjaCIsImRlY29kZWRUb2tlbiIsInVzZXIiLCJsb2dpblVzZXIiLCJmZXRjaCIsIkFQSV9CQVNFX1VSTCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXMiLCJqc29uIiwiY2F0Y2giLCJlcnIiLCJjb2RlIiwibWVzc2FnZSIsIlByb21pc2UiLCJyZWplY3QiLCJTdWJtaXNzaW9uRXJyb3IiLCJfZXJyb3IiLCJyZWZyZXNoQXV0aFRva2VuIiwiZ2V0U3RhdGUiLCJhdXRoIiwiQXV0aG9yaXphdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRU8sTUFBTUEsY0FBYyxHQUFHLGdCQUF2Qjs7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHQyxTQUFTLEtBQUs7QUFDeENDLEVBQUFBLElBQUksRUFBRUgsY0FEa0M7QUFFeENFLEVBQUFBO0FBRndDLENBQUwsQ0FBOUI7OztBQUtBLE1BQU1FLFVBQVUsR0FBRyxZQUFuQjs7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHLE9BQU87QUFDOUJGLEVBQUFBLElBQUksRUFBRUM7QUFEd0IsQ0FBUCxDQUFsQjs7O0FBSUEsTUFBTUUsWUFBWSxHQUFHLGNBQXJCOzs7QUFDQSxNQUFNQyxXQUFXLEdBQUcsT0FBTztBQUNoQ0osRUFBQUEsSUFBSSxFQUFFRztBQUQw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QUFGLEdBQUQsS0FBbUJjLGFBQWEsQ0FBQ2QsU0FBRCxFQUFZZSxRQUFaLENBUmpDLEVBU0pjLEtBVEksQ0FTRUMsR0FBRyxJQUFJO0FBQ1pmLElBQUFBLFFBQVEsQ0FBQ0wsU0FBUyxDQUFDb0IsR0FBRCxDQUFWLENBQVI7QUFDQWYsSUFBQUEsUUFBUSxDQUFDWixTQUFTLEVBQVYsQ0FBUjtBQUNBLHNDQUFlSCxTQUFmO0FBQ0QsR0FiSSxDQUFQO0FBY0QsQ0FqQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgand0RGVjb2RlIGZyb20gJ2p3dC1kZWNvZGUnO1xuaW1wb3J0IHsgU3VibWlzc2lvbkVycm9yIH0gZnJvbSAncmVkdXgtZm9ybSc7XG5cbmltcG9ydCB7IEFQSV9CQVNFX1VSTCB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBub3JtYWxpemVSZXNwb25zZUVycm9ycyB9IGZyb20gJy4uL3V0aWxzL25vcm1hbGl6ZVJlc3BvbnNlRXJyb3JzJztcbmltcG9ydCB7IHNhdmVBdXRoVG9rZW4sIGNsZWFyQXV0aFRva2VuIH0gZnJvbSAnLi4vdXRpbHMvbG9jYWwtc3RvcmFnZSc7XG5cbmV4cG9ydCBjb25zdCBTRVRfQVVUSF9UT0tFTiA9ICdTRVRfQVVUSF9UT0tFTic7XG5leHBvcnQgY29uc3Qgc2V0QXV0aFRva2VuID0gYXV0aFRva2VuID0+ICh7XG4gIHR5cGU6IFNFVF9BVVRIX1RPS0VOLFxuICBhdXRoVG9rZW5cbn0pO1xuXG5leHBvcnQgY29uc3QgQ0xFQVJfQVVUSCA9ICdDTEVBUl9BVVRIJztcbmV4cG9ydCBjb25zdCBjbGVhckF1dGggPSAoKSA9PiAoe1xuICB0eXBlOiBDTEVBUl9BVVRIXG59KTtcblxuZXhwb3J0IGNvbnN0IEFVVEhfUkVRVUVTVCA9ICdBVVRIX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IGF1dGhSZXF1ZXN0ID0gKCkgPT4gKHtcbiAgdHlwZTogQVVUSF9SRVFVRVNUXG59KTtcblxuZXhwb3J0IGNvbnN0IEFVVEhfU1VDQ0VTUyA9ICdBVVRIX1NVQ0NFU1MnO1xuZXhwb3J0IGNvbnN0IGF1dGhTdWNjZXNzID0gY3VycmVudFVzZXIgPT4gKHtcbiAgdHlwZTogQVVUSF9TVUNDRVNTLFxuICBjdXJyZW50VXNlclxufSk7XG5cbmV4cG9ydCBjb25zdCBBVVRIX0VSUk9SID0gJ0FVVEhfRVJST1InO1xuZXhwb3J0IGNvbnN0IGF1dGhFcnJvciA9IGVycm9yID0+ICh7XG4gIHR5cGU6IEFVVEhfRVJST1IsXG4gIGVycm9yXG59KTtcblxuZXhwb3J0IGNvbnN0IFRPR0dMRV9PTkJPQVJESU5HID0gJ1RPR0dMRV9PTkJPQVJESU5HJztcbmV4cG9ydCBjb25zdCB0b2dnbGVPbmJvYXJkaW5nID0gKCkgPT4gKHtcbiAgdHlwZTogVE9HR0xFX09OQk9BUkRJTkdcbn0pO1xuXG5jb25zdCBzdG9yZUF1dGhJbmZvID0gKGF1dGhUb2tlbiwgZGlzcGF0Y2gpID0+IHtcbiAgY29uc3QgZGVjb2RlZFRva2VuID0gand0RGVjb2RlKGF1dGhUb2tlbik7XG4gIGRpc3BhdGNoKHNldEF1dGhUb2tlbihhdXRoVG9rZW4pKTtcbiAgZGlzcGF0Y2goYXV0aFN1Y2Nlc3MoZGVjb2RlZFRva2VuLnVzZXIpKVxuICBzYXZlQXV0aFRva2VuKGF1dGhUb2tlbik7XG59XG5cbmV4cG9ydCBjb25zdCBsb2dpblVzZXIgPSB1c2VyID0+IGRpc3BhdGNoID0+IHtcbiAgZGlzcGF0Y2goYXV0aFJlcXVlc3QoKSk7XG4gIHJldHVybiBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2F1dGgvbG9naW5gLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcbiAgfSlcbiAgICAudGhlbihyZXMgPT4gbm9ybWFsaXplUmVzcG9uc2VFcnJvcnMocmVzKSlcbiAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAudGhlbigoeyBhdXRoVG9rZW4gfSkgPT4gc3RvcmVBdXRoSW5mbyhhdXRoVG9rZW4sIGRpc3BhdGNoKSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGNvbnN0IHsgY29kZSB9ID0gZXJyO1xuICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgIGNvZGUgPT09IDQwMVxuICAgICAgICAgID8gJ0luY29ycmVjdCB1c2VybmFtZSBvciBwYXNzd29yZCdcbiAgICAgICAgICA6ICdVbmFibGUgdG8gbG9naW4sIHBsZWFzZSB0cnkgYWdhaW4nO1xuICAgICAgZGlzcGF0Y2goYXV0aEVycm9yKGVycikpO1xuICAgICAgLy8gQ291bGQgbm90IGF1dGhlbnRpY2F0ZSwgc28gcmV0dXJuIGEgU3VibWlzc2lvbkVycm9yIGZvciBSZWR1eFxuICAgICAgLy8gRm9ybVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgU3VibWlzc2lvbkVycm9yKHtcbiAgICAgICAgICBfZXJyb3I6IG1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVmcmVzaEF1dGhUb2tlbiA9ICgpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgZGlzcGF0Y2goYXV0aFJlcXVlc3QoKSk7XG4gIGNvbnN0IGF1dGhUb2tlbiA9IGdldFN0YXRlKCkuYXV0aC5hdXRoVG9rZW47XG4gIHJldHVybiBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2F1dGgvcmVmcmVzaGAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXV0aFRva2VufWBcbiAgICB9XG4gIH0pXG4gICAgLnRoZW4ocmVzID0+IG5vcm1hbGl6ZVJlc3BvbnNlRXJyb3JzKHJlcykpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgLnRoZW4oKHsgYXV0aFRva2VuIH0pID0+IHN0b3JlQXV0aEluZm8oYXV0aFRva2VuLCBkaXNwYXRjaCkpXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBkaXNwYXRjaChhdXRoRXJyb3IoZXJyKSk7XG4gICAgICBkaXNwYXRjaChjbGVhckF1dGgoKSk7XG4gICAgICBjbGVhckF1dGhUb2tlbihhdXRoVG9rZW4pXG4gICAgfSk7XG59O1xuIl19