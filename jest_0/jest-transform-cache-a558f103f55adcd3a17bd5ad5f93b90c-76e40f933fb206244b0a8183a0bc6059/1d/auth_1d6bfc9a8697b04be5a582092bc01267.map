{"version":3,"sources":["auth.js"],"names":["SET_AUTH_TOKEN","setAuthToken","authToken","type","CLEAR_AUTH","clearAuth","AUTH_REQUEST","authRequest","AUTH_SUCCESS","authSuccess","currentUser","AUTH_ERROR","authError","error","TOGGLE_ONBOARDING","toggleOnboarding","storeAuthInfo","dispatch","decodedToken","user","loginUser","fetch","API_BASE_URL","method","headers","body","JSON","stringify","then","res","json","catch","err","code","message","Promise","reject","SubmissionError","_error","refreshAuthToken","getState","auth","Authorization"],"mappings":"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","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { SubmissionError } from 'redux-form';\n\nimport { API_BASE_URL } from '../config';\nimport { normalizeResponseErrors } from '../utils/normalizeResponseErrors';\nimport { saveAuthToken, clearAuthToken } from '../utils/local-storage';\n\nexport const SET_AUTH_TOKEN = 'SET_AUTH_TOKEN';\nexport const setAuthToken = authToken => ({\n  type: SET_AUTH_TOKEN,\n  authToken\n});\n\nexport const CLEAR_AUTH = 'CLEAR_AUTH';\nexport const clearAuth = () => ({\n  type: CLEAR_AUTH\n});\n\nexport const AUTH_REQUEST = 'AUTH_REQUEST';\nexport const authRequest = () => ({\n  type: AUTH_REQUEST\n});\n\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const authSuccess = currentUser => ({\n  type: AUTH_SUCCESS,\n  currentUser\n});\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const authError = error => ({\n  type: AUTH_ERROR,\n  error\n});\n\nexport const TOGGLE_ONBOARDING = 'TOGGLE_ONBOARDING';\nexport const toggleOnboarding = () => ({\n  type: TOGGLE_ONBOARDING\n});\n\nconst storeAuthInfo = (authToken, dispatch) => {\n  const decodedToken = jwtDecode(authToken);\n  dispatch(setAuthToken(authToken));\n  dispatch(authSuccess(decodedToken.user))\n  saveAuthToken(authToken);\n}\n\nexport const loginUser = user => dispatch => {\n  dispatch(authRequest());\n  return fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(res => normalizeResponseErrors(res))\n    .then(res => res.json())\n    .then(({ authToken }) => storeAuthInfo(authToken, dispatch))\n    .catch(err => {\n      const { code } = err;\n      const message =\n        code === 401\n          ? 'Incorrect username or password'\n          : 'Unable to login, please try again';\n      dispatch(authError(err));\n      // Could not authenticate, so return a SubmissionError for Redux\n      // Form\n      return Promise.reject(\n        new SubmissionError({\n          _error: message\n        })\n      );\n    });\n};\n\nexport const refreshAuthToken = () => (dispatch, getState) => {\n  dispatch(authRequest());\n  const authToken = getState().auth.authToken;\n  return fetch(`${API_BASE_URL}/auth/refresh`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${authToken}`\n    }\n  })\n    .then(res => normalizeResponseErrors(res))\n    .then(res => res.json())\n    .then(({ authToken }) => storeAuthInfo(authToken, dispatch))\n    .catch(err => {\n      dispatch(authError(err));\n      dispatch(clearAuth());\n      clearAuthToken(authToken)\n    });\n};\n"]}