{"version":3,"sources":["editAdventureForm.js"],"names":["EditAdventureForm","React","Component","renderCheckBox","input","label","value","e","checked","onChange","toggleAdventureEditForm","props","dispatch","onSubmit","values","title","startContent","startVideoURL","password","removePassword","console","log","adventure","then","render","error","handleSubmit","Input","required","nonEmpty","TextArea","isTrimmedPassword","mapStateToProps","state","adventureId","currentAdventure","id","initialValues","Object","assign","isEditing","node","isDeleting","form","enableReinitialize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n// import { url } from 'redux-form-validators'\nimport Input from \"./input\";\nimport TextArea from \"./textarea\";\nimport { editAdventure, toggleAdventureEditing } from '../actions/createAdventure';\nimport { required, nonEmpty, isTrimmedPassword } from \"../utils/validators\";\nimport { connect } from 'react-redux';\nimport { Checkbox, Form } from 'semantic-ui-react';\n\nclass EditAdventureForm extends React.Component {\n  renderCheckBox = ({ input, label }) => {\n    return (\n      <Form.Field>\n        <Checkbox\n          autoFocus={true}\n          label={label}\n          checked={input.value ? true : false}\n          onChange={(e, { checked }) => {\n            input.onChange(checked)\n          }\n          }\n        />\n      </Form.Field>\n    );\n  };\n\n  toggleAdventureEditForm() {\n    return this.props.dispatch(toggleAdventureEditing())\n  }\n\n  onSubmit(values) {\n    let { title,\n      startContent,\n      startVideoURL,\n      password,\n      removePassword } = values;\n    console.log(password);\n    let adventure = {\n      title,\n      startContent,\n      startVideoURL,\n      password,\n      removePassword\n    };\n    return this.props.dispatch(editAdventure(adventure))\n      .then(() => this.toggleAdventureEditForm())\n  }\n  render() {\n    let error;\n    if (this.props.error) {\n      error = (\n        <div className=\"form-error\" aria-live=\"polite\">\n          {this.props.error}\n        </div>\n      );\n    }\n    return (<div>\n      <div className=\"form-field\">\n        <form onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n        <h2>Edit Adventure Information</h2>\n\n          {error}\n          <Field\n            className=\"title input-field\"\n            label=\"Adventure Title\"\n            ariaLabel=\"adventure title\"\n            placeholder=\"LearnVenture\"\n            name=\"title\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"startContent\"\n            label=\"Adventure Introduction\"\n            ariaLabel=\"Adventure Introduction\"\n            placeholder=\"This is the beginning of your learning quest. Let's have some fun!\"\n            name=\"startContent\"\n            component={TextArea}\n            type=\"text\" />\n          <Field\n            className=\"videoURL input-field\"\n            label=\"Opening video URL(optional)\"\n            ariaLabel=\"Opening video URL(optional)\"\n            placeholder=\"https://www.youtube.com/embed/dHSQAEam2yc\"\n            name=\"startVideoURL\"\n            component={Input}\n            // validate={url({ protocols: ['http', 'https'] })}\n            type=\"text\" />\n          <Field className=\"textContent\"\n            label=\"Optional Password:\"\n            ariaLabel=\"Temporary\"\n            name=\"password\"\n            component={Input}\n            placeholder=\"Not Required\"\n            type=\"text\"\n            validate={[isTrimmedPassword]} />\n          <Field\n            className=\"removePassword\"\n            name=\"removePassword\"\n            label=\"Remove Password\"\n            component={this.renderCheckBox}\n            type=\"checkbox\" />\n          <button type=\"submit\">Update Adventure</button>\n          <button onClick={() => this.toggleAdventureEditForm()}>Cancel</button>\n        </form>\n      </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n\n  return {\n    adventureId: state.adventure.currentAdventure.id,\n    initialValues: Object.assign({}, state.adventure.currentAdventure),\n    isEditing: state.node.isEditing,\n    isDeleting: state.node.isDeleting\n  };\n};\n\n\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: 'Adventure',\n  enableReinitialize: true\n  // onSubmitFail: (errors, dispatch) =>\n  //   dispatch(focus('Adventure'/*, Object.keys(errors)[0]*/\n  //   ))\n})(EditAdventureForm));"]}