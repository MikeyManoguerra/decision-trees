{"version":3,"sources":["adventureBuilder.js"],"names":["AdventureBuilder","React","Component","componentDidMount","id","props","match","params","dispatch","showUpdate","changeCurrentNode","value","node","currentAdventure","nodes","find","render","adventure","nodeForm","parentInt","useExistingNode","options","map","title","e","target","mapStateToProps","state","currentUser","auth","username","name","firstName","lastName","loading","currentNode","isDeleting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport requiresLogin from './requires-login';\nimport NewNodeForm from './new-node-form';\nimport CurrentNodeBrancher from './current-node-brancher';\nimport { getAdventureById } from '../actions/createAdventure'\nimport { setCurrentNode, toggleUpdateForm } from '../actions/nodes'\nimport GraphContainer from './graph-container'\nimport ExistingNodeSelector from './existingNodeSelector';\nimport Sidebar from './sidebar';\nimport { toggleAdventureDeleting, deleteAdventure } from '../actions/createAdventure';\n\nexport class AdventureBuilder extends React.Component {\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.dispatch(getAdventureById(id))\n    if(this.props.showUpdate === true){\n      this.props.dispatch(toggleUpdateForm())\n    }\n  }\n\n  changeCurrentNode(value) {\n    let node = this.props.currentAdventure.nodes.find(node => node.id === value);\n    this.props.dispatch(setCurrentNode(node))\n  }\n\n  render() {\n    const adventure = this.props.currentAdventure\n    let nodeForm;\n    if (this.props.parentInt) {\n      nodeForm = <NewNodeForm />\n    }\n    if (this.props.parentInt && this.props.useExistingNode) {\n      nodeForm = <ExistingNodeSelector />;\n    }\n    if (!adventure) {\n      return <div className=\"loading\">loading...</div>;\n    }\n// needs 'key' prop below\n    const options = this.props.currentAdventure.nodes.map((node) =>\n      <option label={node.title} value={node.id}>{node.title}</option>);\n\n    return (\n      <div>\n        <GraphContainer />\n        <select className=\"node-select\"\n          label=\"Current Question\"\n          name=\"nodeSelect\"\n          options={options}\n          onChange={e => this.changeCurrentNode(e.target.value)}>{options}</select>\n        <CurrentNodeBrancher />\n        {nodeForm}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.auth;\n  return {\n    username: state.auth.currentUser.username,\n    name: `${currentUser.firstName} ${currentUser.lastName}`,\n    currentAdventure: state.adventure.currentAdventure,\n    parentInt: state.node.parentInt,\n    useExistingNode: state.node.useExistingNode,\n    loading: state.adventure.loading,\n    currentNode: state.node.currentNode,\n    isDeleting: state.adventure.isDeleting,\n    showUpdate: state.node.showUpdate\n  };\n};\n\nexport default requiresLogin()(connect(mapStateToProps)(AdventureBuilder));"]}