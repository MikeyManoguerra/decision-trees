{"version":3,"sources":["update-node-form.js"],"names":["UpdateNodeForm","React","Component","renderCheckBox","input","label","value","e","checked","onChange","toggleIsEnding","props","dispatch","toggleNodeDeleting","console","log","cancelUpdate","onClickDelete","nodeId","currentNodeId","adId","adventureId","then","head","nodes","onSubmit","values","parentInt","parentId","title","question","answerA","answerB","answerC","answerD","videoURL","textContent","ending","newNode","render","error","parentAnswer","currentNode","questions","isEnding","TextArea","required","nonEmpty","Input","isDeleting","id","handleSubmit","mapStateToProps","state","node","adventure","currentAdventure","initialValues","Object","assign","form","enableReinitialize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, focus } from 'redux-form';\nimport Input from \"./input\";\nimport TextArea from \"./textarea\";\nimport { deleteNode } from '../actions/nodes';\nimport { required, nonEmpty } from \"../utils/validators\";\nimport {\n  updateNode,\n  toggleUpdateForm,\n  toggleNodeDeleting,\n  toggleEnding,\n  setCurrentNode\n} from '../actions/nodes'\nimport { Checkbox, Form } from 'semantic-ui-react';\n\nclass UpdateNodeForm extends React.Component {\n  \n  toggleIsEnding() {\n    return this.props.dispatch(toggleEnding())\n  }\n  toggleNodeDeleting() {\n    console.log('deletingtoggle clicked')\n    return this.props.dispatch(toggleNodeDeleting())\n  }\n\n  cancelUpdate() {\n    return this.props.dispatch(toggleUpdateForm())\n  }\n\n  onClickDelete() {\n    let nodeId = this.props.currentNodeId;\n    let adId = this.props.adventureId;\n    return this.props.dispatch(deleteNode(adId, nodeId))\n      .then(() => {\n        let head = this.props.nodes[0]\n        this.toggleNodeDeleting()\n        this.props.dispatch(setCurrentNode(head))\n      })\n  }\n  onSubmit(values) {\n    const parentInt = this.props.parentInt;\n    const adventureId = this.props.adventureId;\n    const parentId = this.props.parentId;\n    const nodeId = this.props.currentNodeId\n    let { title, question, answerA, answerB, answerC, answerD, videoURL, textContent, ending } = values;\n    let newNode = {\n      title,\n      answerA,\n      answerB,\n      answerC,\n      answerD,\n      textContent,\n      videoURL,\n      question,\n      parentInt,\n      adventureId,\n      parentId,\n      nodeId,\n      ending\n    };\n    this.props.dispatch(updateNode(newNode))\n  }\n\n  renderCheckBox = ({ input, label }) => {\n    return (\n      <Form.Field>\n        <Checkbox\n          label={label}\n          checked={input.value ? true : false}\n          onChange={(e, { checked }) => {\n            input.onChange(checked)\n            this.toggleIsEnding()\n          }}\n        />\n      </Form.Field>\n    );\n  };\n\n  render() {\n    let error;\n    if (this.props.error) {\n      error = (\n        <div className=\"form-error\" aria-live=\"polite\">\n          {this.props.error}\n        </div>\n      );\n    }\n\n    // Used to display which parent points to this node only\n    let parentAnswer;\n    if (this.props.parentInt === 1) {\n      parentAnswer = this.props.currentNode.answerA\n    }\n    if (this.props.parentInt === 2) {\n      parentAnswer = this.props.currentNode.answerB\n    }\n    if (this.props.parentInt === 3) {\n      parentAnswer = this.props.currentNode.answerC\n    }\n    if (this.props.parentInt === 4) {\n      parentAnswer = this.props.currentNode.answerD\n    }\n\n    // what questions variable is dependent upon whether current node being edited is \n    // an ending or not\n    let questions;\n\n    if (this.props.isEnding) {\n      questions = (\n        <Field\n          className=\"textContent\"\n          label=\"Ending Description\"\n          name=\"textContent\"\n          component={TextArea}\n          type=\"text\"\n          validate={[required, nonEmpty]} />\n      )\n    } else {\n      questions = (\n        <div className=\"questionAndAnswers\">\n          <Field\n            className=\"textContent input-field\"\n            label=\"Scenario Description\"\n            name=\"textContent\"\n            component={TextArea}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"question input-field\"\n            label=\"New Question\"\n            name=\"question\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"answer A input-field\"\n            label=\"Answer A\"\n            name=\"answerA\"\n            component={Input}\n            type=\"text\"\n            validate={[required, nonEmpty]} />\n          <Field\n            className=\"answer B input-field\"\n            placeholder=\"Optional\"\n            label=\"Answer B\"\n            name=\"answerB\"\n            component={Input}\n            type=\"text\"\n          />\n          <Field\n            className=\"answer C input-field\"\n            placeholder=\"Optional\"\n            label=\"Answer C\"\n            name='answerC'\n            component={Input}\n            type=\"text\"\n          />\n          <Field\n            className=\"answer D input-field\"\n            placeholder=\"Optional\"\n            label=\"Answer D\"\n            name=\"answerD\"\n            component={Input}\n            type=\"text\"\n          />\n        </div>\n      )\n    }\n\n    // renders the delete warning and button only, with a go back button\n    if (this.props.isDeleting) {\n      return (\n        <div className=\"confirm-delete-node\">\n          <h3>Are you sure you want to delete this Node?</h3>\n          <div className=\"buttons\">\n            <button\n              className=\"delete-it\"\n              type='button'\n              onClick={id => this.onClickDelete(id)}\n            >Delete It\n            </button>\n            <button\n              className=\"keep-it\"\n              type='button'\n              onClick={() => this.toggleNodeDeleting()}\n            >Keep It\n            </button>\n          </div>\n        </div>\n      )\n    } \n    // render the update node form \n    else\n      return (\n        <div className='update-form-container'>\n          <form onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n            <h2>This Node: {\n              this.props.currentNode.title ?\n                this.props.currentNode.title :\n                this.props.currentNode.question}</h2>\n            <h4>answer that points to this node: {parentAnswer}</h4>\n            {error}\n            <Field\n              className=\"end-checkbox\"\n              name=\"ending\"\n              label=\"Is this an Ending?\"\n              component={this.renderCheckBox}\n              type=\"checkbox\" />\n            <Field\n              className=\"title input-field\"\n              label=\"New Title\"\n              name=\"title\"\n              component={Input}\n              type=\"text\"\n              validate={[required, nonEmpty]} />\n            <Field\n              className=\"videoURL input-field\"\n              label=\"Video URL (optional)\"\n              placeholder=\"http://(videoURL)\"\n              name=\"videoURL\"\n              component={Input}\n              type=\"text\" />\n            {questions}\n            <button type=\"submit\">Update Node</button>\n          </form>\n          <button onClick={() => this.cancelUpdate()}>Cancel</button>\n          <button className=\"delete-node-toggle\" onClick={() => this.toggleNodeDeleting()}>Delete Node</button>\n        </div>)\n  }\n}\n\nconst mapStateToProps = state => {\n\n  return {\n    currentNode: state.node.currentNode,\n    nodes: state.adventure.currentAdventure.nodes,\n    currentNodeId: state.node.currentNode.id,\n    parentInt: state.node.parentInt,\n    adventureId: state.adventure.currentAdventure.id,\n    parentId: state.node.currentNode.id,\n    initialValues: Object.assign({}, state.node.currentNode),\n    isEnding: state.node.isEnding,\n    isDeleting: state.node.isDeleting\n  };\n};\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: 'NewNode',\n  enableReinitialize: true\n  // onSubmitFail: (errors, dispatch) =>\n  //   dispatch(focus('Adventure'/*, Object.keys(errors)[0]*/\n  //   ))\n})(UpdateNodeForm));"]}