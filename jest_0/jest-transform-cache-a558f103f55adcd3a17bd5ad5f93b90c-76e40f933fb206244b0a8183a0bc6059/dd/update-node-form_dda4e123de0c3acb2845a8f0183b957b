44b387ab1826c7af323498b90a38ff25
"use strict";

var _interopRequireDefault = require("/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reduxForm = require("redux-form");

var _input = _interopRequireDefault(require("./input"));

var _textarea = _interopRequireDefault(require("./textarea"));

var _nodes = require("../actions/nodes");

var _validators = require("../utils/validators");

var _semanticUiReact = require("semantic-ui-react");

var _jsxFileName = "/home/flightlessbird/Thinkful/projects/CYOA/client-5NodeBodies/src/components/update-node-form.js";

class UpdateNodeForm extends _react.default.Component {
  constructor(...args) {
    super(...args);

    this.renderCheckBox = ({
      input,
      label
    }) => {
      return _react.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        },
        __self: this
      }, _react.default.createElement(_semanticUiReact.Checkbox, {
        label: label,
        checked: input.value ? true : false,
        onChange: (e, {
          checked
        }) => {
          input.onChange(checked);
          this.toggleIsEnding();
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        },
        __self: this
      }));
    };
  }

  toggleIsEnding() {
    return this.props.dispatch((0, _nodes.toggleEnding)());
  }

  toggleNodeDeleting() {
    console.log('deletingtoggle clicked');
    return this.props.dispatch((0, _nodes.toggleNodeDeleting)());
  }

  cancelUpdate() {
    return this.props.dispatch((0, _nodes.toggleUpdateForm)());
  }

  onClickDelete() {
    let nodeId = this.props.currentNodeId;
    let adId = this.props.adventureId;
    return this.props.dispatch((0, _nodes.deleteNode)(adId, nodeId)).then(() => {
      let head = this.props.nodes[0];
      this.toggleNodeDeleting();
      this.props.dispatch((0, _nodes.setCurrentNode)(head));
    });
  }

  onSubmit(values) {
    const parentInt = this.props.parentInt;
    const adventureId = this.props.adventureId;
    const parentId = this.props.parentId;
    const nodeId = this.props.currentNodeId;
    let title = values.title,
        question = values.question,
        answerA = values.answerA,
        answerB = values.answerB,
        answerC = values.answerC,
        answerD = values.answerD,
        videoURL = values.videoURL,
        textContent = values.textContent,
        ending = values.ending;
    let newNode = {
      title,
      answerA,
      answerB,
      answerC,
      answerD,
      textContent,
      videoURL,
      question,
      parentInt,
      adventureId,
      parentId,
      nodeId,
      ending
    };
    this.props.dispatch((0, _nodes.updateNode)(newNode));
  }

  render() {
    let error;

    if (this.props.error) {
      error = _react.default.createElement("div", {
        className: "form-error",
        "aria-live": "polite",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        },
        __self: this
      }, this.props.error);
    } // Used to display which parent points to this node only


    let parentAnswer;

    if (this.props.parentInt === 1) {
      parentAnswer = this.props.currentNode.answerA;
    }

    if (this.props.parentInt === 2) {
      parentAnswer = this.props.currentNode.answerB;
    }

    if (this.props.parentInt === 3) {
      parentAnswer = this.props.currentNode.answerC;
    }

    if (this.props.parentInt === 4) {
      parentAnswer = this.props.currentNode.answerD;
    } // what questions variable is dependent upon whether current node being edited is 
    // an ending or not


    let questions;

    if (this.props.isEnding) {
      questions = _react.default.createElement(_reduxForm.Field, {
        className: "textContent",
        label: "Ending Description",
        name: "textContent",
        component: _textarea.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 111
        },
        __self: this
      });
    } else {
      questions = _react.default.createElement("div", {
        className: "questionAndAnswers",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121
        },
        __self: this
      }, _react.default.createElement(_reduxForm.Field, {
        className: "textContent input-field",
        label: "Scenario Description",
        name: "textContent",
        component: _textarea.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 122
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "question input-field",
        label: "New Question",
        name: "question",
        component: _input.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 129
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer A input-field",
        label: "Answer A",
        name: "answerA",
        component: _input.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 136
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer B input-field",
        placeholder: "Optional",
        label: "Answer B",
        name: "answerB",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 143
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer C input-field",
        placeholder: "Optional",
        label: "Answer C",
        name: "answerC",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 151
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "answer D input-field",
        placeholder: "Optional",
        label: "Answer D",
        name: "answerD",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 159
        },
        __self: this
      }));
    } // renders the delete warning and button only, with a go back button


    if (this.props.isDeleting) {
      return _react.default.createElement("div", {
        className: "confirm-delete-node",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 174
        },
        __self: this
      }, _react.default.createElement("h3", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 175
        },
        __self: this
      }, "Are you sure you want to delete this Node?"), _react.default.createElement("div", {
        className: "buttons",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 176
        },
        __self: this
      }, _react.default.createElement("button", {
        className: "delete-it",
        type: "button",
        onClick: id => this.onClickDelete(id),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 177
        },
        __self: this
      }, "Delete It"), _react.default.createElement("button", {
        className: "keep-it",
        type: "button",
        onClick: () => this.toggleNodeDeleting(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 183
        },
        __self: this
      }, "Keep It")));
    } // render the update node form 
    else return _react.default.createElement("div", {
        className: "update-form-container",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196
        },
        __self: this
      }, _react.default.createElement("form", {
        onSubmit: this.props.handleSubmit(values => this.onSubmit(values)),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 197
        },
        __self: this
      }, _react.default.createElement("h2", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 198
        },
        __self: this
      }, "This Node: ", this.props.currentNode.title ? this.props.currentNode.title : this.props.currentNode.question), _react.default.createElement("h4", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 202
        },
        __self: this
      }, "answer that points to this node: ", parentAnswer), error, _react.default.createElement(_reduxForm.Field, {
        className: "end-checkbox",
        name: "ending",
        label: "Is this an Ending?",
        component: this.renderCheckBox,
        type: "checkbox",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 204
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "title input-field",
        label: "New Title",
        name: "title",
        component: _input.default,
        type: "text",
        validate: [_validators.required, _validators.nonEmpty],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 210
        },
        __self: this
      }), _react.default.createElement(_reduxForm.Field, {
        className: "videoURL input-field",
        label: "Video URL (optional)",
        placeholder: "http://(videoURL)",
        name: "videoURL",
        component: _input.default,
        type: "text",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 217
        },
        __self: this
      }), questions, _react.default.createElement("button", {
        type: "submit",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 225
        },
        __self: this
      }, "Update Node")), _react.default.createElement("button", {
        onClick: () => this.cancelUpdate(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 227
        },
        __self: this
      }, "Cancel"), _react.default.createElement("button", {
        className: "delete-node-toggle",
        onClick: () => this.toggleNodeDeleting(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 228
        },
        __self: this
      }, "Delete Node"));
  }

}

const mapStateToProps = state => {
  return {
    currentNode: state.node.currentNode,
    nodes: state.adventure.currentAdventure.nodes,
    currentNodeId: state.node.currentNode.id,
    parentInt: state.node.parentInt,
    adventureId: state.adventure.currentAdventure.id,
    parentId: state.node.currentNode.id,
    initialValues: Object.assign({}, state.node.currentNode),
    isEnding: state.node.isEnding,
    isDeleting: state.node.isDeleting
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)((0, _reduxForm.reduxForm)({
  form: 'NewNode',
  enableReinitialize: true // onSubmitFail: (errors, dispatch) =>
  //   dispatch(focus('Adventure'/*, Object.keys(errors)[0]*/
  //   ))

})(UpdateNodeForm));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,