{"version":3,"sources":["create-head-node.js"],"names":["CreateHeadNode","React","Component","onSubmit","values","adventureId","props","nodeId","currentNodeId","ending","question","answerA","answerB","answerC","answerD","videoURL","textContent","title","newNode","dispatch","then","history","push","render","handleSubmit","TextArea","required","nonEmpty","Input","mapStateToProps","state","adventure","currentAdventure","id","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { createNode, setCurrentNode } from '../actions/nodes'\nimport { Field, reduxForm, focus } from 'redux-form';\nimport TextArea from \"./textarea\";\nimport Input from \"./input\";\nimport { required, nonEmpty } from \"../utils/validators\";\n\nexport class CreateHeadNode extends React.Component {\n\n\n  onSubmit(values) {\n    const adventureId = this.props.adventureId;\n    const nodeId = this.props.currentNodeId\n    const ending = false\n    let { question, answerA, answerB, answerC, answerD, videoURL, textContent, title } = values;\n    let newNode = {\n      title,\n      answerA,\n      answerB,\n      answerC,\n      answerD,\n      textContent,\n      videoURL,\n      question,\n      adventureId,\n      nodeId,\n      ending\n    };\n    return this.props.dispatch(createNode(newNode))\n      .then(() => {\n        return this.props.history.push(`/adventure/adventurebuilder/${adventureId}`)\n      })\n  }\n  render() {\n    return (\n      <div>\n        <h1>Please create a head node for your adventure</h1>\n        <div className=\"questionAndAnswers\">\n          <form onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n            <Field\n              className=\"textContent\"\n              label=\"Scenario Description\"\n              name=\"textContent\"\n              component={TextArea}\n              type=\"text\"\n              validate={[required, nonEmpty]} />\n            <Field\n              className=\"title input-field\"\n              label=\"Title: \"\n              name=\"title\"\n              component={Input}\n              type=\"text\"\n              validate={[required, nonEmpty]} />\n            <Field\n              className=\"videoURL input-field\"\n              label=\"video URL :\"\n              name=\"videoURL\"\n              component={Input}\n              type=\"text\" />\n            <Field\n              className=\"question input-field\"\n              label=\"New Question\"\n              name=\"question\"\n              component={Input}\n              type=\"text\"\n              validate={[required, nonEmpty]} />\n            <Field\n              className=\"answer A input-field\"\n              label=\"Answer A\"\n              name=\"answerA\"\n              component={Input}\n              type=\"text\"\n              validate={[required, nonEmpty]} />\n            <Field\n              className=\"answer B input-field\"\n              placeholder=\"Optional\"\n              label=\"Answer B\"\n              name=\"answerB\"\n              component={Input}\n              type=\"text\"\n            />\n            <Field\n              className=\"answer C input-field\"\n              placeholder=\"Optional\"\n              label=\"Answer C\"\n              name='answerC'\n              component={Input}\n              type=\"text\"\n            />\n            <Field\n              className=\"answer D input-field\"\n              placeholder=\"Optional\"\n              label=\"Answer D\"\n              name=\"answerD\"\n              component={Input}\n              type=\"text\"\n            />\n            <button>New Node!</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  adventureId: state.adventure.currentAdventure.id,\n});\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: 'CreateHeadNode',\n\n  // onSubmitFail: (errors, dispatch) =>\n  //   dispatch(focus('Adventure'/*, Object.keys(errors)[0]*/\n  //   ))\n})(CreateHeadNode));"]}