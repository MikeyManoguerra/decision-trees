038a2fab5173bc8fb4b5111631e1ff62
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStudentSearch = exports.getStudentAll = exports.getStudentCurrentNode = exports.getStudentAdventure = exports.studentEndTutorial = exports.STUDENT_END_TUTORIAL = exports.studentPreviousTutorial = exports.STUDENT_PREVIOUS_TUTORIAL = exports.studentNextTutorial = exports.STUDENT_NEXT_TUTORIAL = exports.studentStartTutorial = exports.STUDENT_START_TUTORIAL = exports.getStudentSearchError = exports.GET_STUDENT_SEARCH_ERROR = exports.getStudentSearchSuccess = exports.GET_STUDENT_SEARCH_SUCCESS = exports.getStudentSearchRequest = exports.GET_STUDENT_SEARCH_REQUEST = exports.restartStudentAdventure = exports.RESTART_STUDENT_ADVENTURE = exports.getStudentCurrentNodeError = exports.GET_STUDENT_CURRENTNODE_ERROR = exports.getStudentCurrentNodeSuccess = exports.GET_STUDENT_CURRENTNODE_SUCCESS = exports.getStudentCurrentNodeRequest = exports.GET_STUDENT_CURRENTNODE_REQUEST = exports.endStudentAdventure = exports.END_STUDENT_ADVENTURE = exports.getStudentAdventureError = exports.GET_STUDENT_ADVENTURE_ERROR = exports.getStudentAdventureSuccess = exports.GET_STUDENT_ADVENTURE_SUCCESS = exports.getStudentAdventureRequest = exports.GET_STUDENT_ADVENTURE_REQUEST = void 0;

var _config = require("../config");

var _utils = require("../utils");

const GET_STUDENT_ADVENTURE_REQUEST = 'GET_STUDENT_ADVENTURE_REQUEST';
exports.GET_STUDENT_ADVENTURE_REQUEST = GET_STUDENT_ADVENTURE_REQUEST;

const getStudentAdventureRequest = () => ({
  type: GET_STUDENT_ADVENTURE_REQUEST
});

exports.getStudentAdventureRequest = getStudentAdventureRequest;
const GET_STUDENT_ADVENTURE_SUCCESS = 'GET_STUDENT_ADVENTURE_SUCCESS';
exports.GET_STUDENT_ADVENTURE_SUCCESS = GET_STUDENT_ADVENTURE_SUCCESS;

const getStudentAdventureSuccess = adventure => ({
  type: GET_STUDENT_ADVENTURE_SUCCESS,
  adventure
});

exports.getStudentAdventureSuccess = getStudentAdventureSuccess;
const GET_STUDENT_ADVENTURE_ERROR = 'GET_STUDENT_ADVENTURE_ERROR';
exports.GET_STUDENT_ADVENTURE_ERROR = GET_STUDENT_ADVENTURE_ERROR;

const getStudentAdventureError = error => ({
  type: GET_STUDENT_ADVENTURE_ERROR,
  error
});

exports.getStudentAdventureError = getStudentAdventureError;
const END_STUDENT_ADVENTURE = 'END_STUDENT_ADVENTURE';
exports.END_STUDENT_ADVENTURE = END_STUDENT_ADVENTURE;

const endStudentAdventure = () => ({
  type: END_STUDENT_ADVENTURE
});

exports.endStudentAdventure = endStudentAdventure;
const GET_STUDENT_CURRENTNODE_REQUEST = 'GET_STUDENT_CURRENTNODE_REQUEST';
exports.GET_STUDENT_CURRENTNODE_REQUEST = GET_STUDENT_CURRENTNODE_REQUEST;

const getStudentCurrentNodeRequest = () => ({
  type: GET_STUDENT_CURRENTNODE_REQUEST
});

exports.getStudentCurrentNodeRequest = getStudentCurrentNodeRequest;
const GET_STUDENT_CURRENTNODE_SUCCESS = 'GET_STUDENT_CURRENTNODE_SUCCESS';
exports.GET_STUDENT_CURRENTNODE_SUCCESS = GET_STUDENT_CURRENTNODE_SUCCESS;

const getStudentCurrentNodeSuccess = node => ({
  type: GET_STUDENT_CURRENTNODE_SUCCESS,
  node
});

exports.getStudentCurrentNodeSuccess = getStudentCurrentNodeSuccess;
const GET_STUDENT_CURRENTNODE_ERROR = 'GET_STUDENT_CURRENTNODE_ERROR';
exports.GET_STUDENT_CURRENTNODE_ERROR = GET_STUDENT_CURRENTNODE_ERROR;

const getStudentCurrentNodeError = error => ({
  type: GET_STUDENT_CURRENTNODE_ERROR,
  error
});

exports.getStudentCurrentNodeError = getStudentCurrentNodeError;
const RESTART_STUDENT_ADVENTURE = 'RESTART_STUDENT_ADVENTURE';
exports.RESTART_STUDENT_ADVENTURE = RESTART_STUDENT_ADVENTURE;

const restartStudentAdventure = () => ({
  type: RESTART_STUDENT_ADVENTURE
});

exports.restartStudentAdventure = restartStudentAdventure;
const GET_STUDENT_SEARCH_REQUEST = 'GET_STUDENT_SEARCH_REQUEST';
exports.GET_STUDENT_SEARCH_REQUEST = GET_STUDENT_SEARCH_REQUEST;

const getStudentSearchRequest = () => ({
  type: GET_STUDENT_SEARCH_REQUEST
});

exports.getStudentSearchRequest = getStudentSearchRequest;
const GET_STUDENT_SEARCH_SUCCESS = 'GET_STUDENT_SEARCH_SUCCESS';
exports.GET_STUDENT_SEARCH_SUCCESS = GET_STUDENT_SEARCH_SUCCESS;

const getStudentSearchSuccess = results => ({
  type: GET_STUDENT_SEARCH_SUCCESS,
  results
});

exports.getStudentSearchSuccess = getStudentSearchSuccess;
const GET_STUDENT_SEARCH_ERROR = 'GET_STUDENT_SEARCH_ERROR';
exports.GET_STUDENT_SEARCH_ERROR = GET_STUDENT_SEARCH_ERROR;

const getStudentSearchError = error => ({
  type: GET_STUDENT_SEARCH_ERROR,
  error
});

exports.getStudentSearchError = getStudentSearchError;
const STUDENT_START_TUTORIAL = 'STUDENT_START_TUTORIAL';
exports.STUDENT_START_TUTORIAL = STUDENT_START_TUTORIAL;

const studentStartTutorial = () => ({
  type: STUDENT_START_TUTORIAL
});

exports.studentStartTutorial = studentStartTutorial;
const STUDENT_NEXT_TUTORIAL = 'STUDENT_NEXT_TUTORIAL';
exports.STUDENT_NEXT_TUTORIAL = STUDENT_NEXT_TUTORIAL;

const studentNextTutorial = tutorialPageNumber => ({
  type: STUDENT_NEXT_TUTORIAL,
  tutorialPageNumber
});

exports.studentNextTutorial = studentNextTutorial;
const STUDENT_PREVIOUS_TUTORIAL = 'STUDENT_PREVIOUS_TUTORIAL';
exports.STUDENT_PREVIOUS_TUTORIAL = STUDENT_PREVIOUS_TUTORIAL;

const studentPreviousTutorial = tutorialPageNumber => ({
  type: STUDENT_PREVIOUS_TUTORIAL,
  tutorialPageNumber
});

exports.studentPreviousTutorial = studentPreviousTutorial;
const STUDENT_END_TUTORIAL = 'STUDENT_END_TUTORIAL';
exports.STUDENT_END_TUTORIAL = STUDENT_END_TUTORIAL;

const studentEndTutorial = () => ({
  type: STUDENT_END_TUTORIAL
});

exports.studentEndTutorial = studentEndTutorial;

const getStudentAdventure = (id, password) => dispatch => {
  console.log('getStudentAdventure ran');
  console.log(id);
  dispatch(getStudentAdventureRequest());
  return fetch(`${_config.API_BASE_URL}/student/adventure/${id}`, {
    method: 'POST',
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify({
      password
    })
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => dispatch(getStudentAdventureSuccess(res))).catch(error => {
    dispatch(getStudentAdventureError(error));
  });
};

exports.getStudentAdventure = getStudentAdventure;

const getStudentCurrentNode = (adventureId, nodeId) => dispatch => {
  dispatch(getStudentCurrentNodeRequest());
  return fetch(`${_config.API_BASE_URL}/student/${adventureId}/${nodeId}`, {
    method: 'GET'
  }).then(res => (0, _utils.normalizeResponseErrors)(res)).then(res => res.json()).then(res => {
    dispatch(getStudentCurrentNodeSuccess(res));
  }).catch(error => {
    dispatch(getStudentCurrentNodeError(error));
  });
};

exports.getStudentCurrentNode = getStudentCurrentNode;

const getStudentAll = () => dispatch => {
  dispatch(getStudentSearchRequest());
  return fetch(`${_config.API_BASE_URL}/student/search`, {
    method: 'GET'
  }).then(res => {
    return (0, _utils.normalizeResponseErrors)(res);
  }).then(res => {
    return res.json();
  }).then(res => {
    return dispatch(getStudentSearchSuccess(res));
  }).catch(error => {
    return dispatch(getStudentSearchError(error));
  });
};

exports.getStudentAll = getStudentAll;

const getStudentSearch = searchTerm => dispatch => {
  dispatch(getStudentSearchRequest());
  return fetch(`${_config.API_BASE_URL}/student/search/${searchTerm}`, {
    method: 'GET'
  }).then(res => {
    return (0, _utils.normalizeResponseErrors)(res);
  }).then(res => {
    return res.json();
  }).then(res => {
    return dispatch(getStudentSearchSuccess(res));
  }).catch(error => {
    return dispatch(getStudentSearchError(error));
  });
};

exports.getStudentSearch = getStudentSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,