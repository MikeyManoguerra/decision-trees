{"version":3,"sources":["adventureInfo.js"],"names":["AdventureInfo","React","Component","componentDidMount","id","props","match","params","dispatch","isEditing","displayAdventureDeleting","onClickDelete","adId","currentAdventure","then","history","push","toggleAdventureEditForm","showAnalytics","AdventureDetails","adventure","analytics","password","isDeleting","startVideoURL","hasPassword","console","log","videoPlay","nodeVideo","title","startContent","textContent","render","mapStateToProps","state","currentUser","auth","username","name","firstName","lastName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport requiresLogin from './requires-login';\nimport EditAdventureForm from './editAdventureForm'\nimport Analytics from './analytics'\nimport {\n  getAdventureById,\n  toggleAdventureDeleting,\n  toggleAdventureEditing,\n  deleteAdventure,\n  toggleAnalyticsDisplay\n} from '../actions/createAdventure'\n\n\nexport class AdventureInfo extends React.Component {\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.props.dispatch(getAdventureById(id));\n    if (this.props.isEditing) {\n      this.props.dispatch(toggleAdventureEditing())\n    }\n  }\n\n  displayAdventureDeleting() {\n    return this.props.dispatch(toggleAdventureDeleting())\n  }\n\n  onClickDelete() {\n    let adId = this.props.currentAdventure.id;\n    return this.props.dispatch(deleteAdventure(adId))\n      .then(() => {\n        this.props.dispatch(toggleAdventureDeleting())\n        this.props.history.push('/dashboard')\n\n      })\n  }\n\n  toggleAdventureEditForm() {\n    return this.props.dispatch(toggleAdventureEditing())\n  }\n\n  showAnalytics() {\n    return this.props.dispatch(toggleAnalyticsDisplay())\n  }\n\n  AdventureDetails() {\n    const adventure = this.props.currentAdventure\n    let analytics, password;\n    if (this.props.showAnalytics) {\n      analytics = <Analytics />\n    }\n    if (!adventure) {\n      return <div>loading...</div>\n    } else if (adventure && this.props.isDeleting) {\n      return (\n        <div className=\"confirm-delete-adventure\">\n          <h3>Are you sure you want to delete this Entire Adventure?</h3>\n          <h2>All data will be lost. This cannot be undone</h2>\n          <div className=\"buttons\">\n            <button\n              className=\"delete-it\"\n              type='button'\n              onClick={() => this.onClickDelete()}\n            >Delete It\n            </button>\n            <button\n              className=\"keep-it\"\n              type='button'\n              onClick={() => this.displayAdventureDeleting()}\n            >Keep It\n            </button>\n          </div>\n        </div>\n      )\n    } else if (adventure && adventure.startVideoURL && !this.props.isEditing) {\n      if (adventure.hasPassword) {\n        console.log('has pass')\n        password = <span>This adventure is password protected</span>\n      }\n      let videoPlay = adventure.startVideoURL;\n      let nodeVideo = (<iframe title='node-video' width=\"420\" height=\"315\" src={videoPlay}></iframe>)\n      return (\n        <div className='adventure-info'>\n          <h2 className=\"adventure-title\">{adventure.title}</h2>\n          <h3 className=\"info-category\">Adventure Intro</h3> <p>{adventure.startContent}</p>\n          <h3 className=\"info-category\">Opening Video</h3> <div>{nodeVideo}</div>\n          <h3 className=\"info-category\">Starting Scenario</h3> <p>{adventure.textContent}</p>\n          <h3 className=\"info-category\">Adventure Code:</h3> <p>{adventure.id}</p>\n          {password}\n          <div className=\"buttons\">\n            <button onClick={() => this.props.history.push(`/adventure/adventurebuilder/${adventure.id}`)} >Build your Adventure</button>\n            <button\n              type='button'\n              onClick={() => this.toggleAdventureEditForm()}\n            >Edit adventure Starting Info\n              </button>\n            <button className=\"delete-it\"\n              type='button'\n              onClick={() => this.displayAdventureDeleting()}\n            >Delete adventure\n              </button>\n            <button className=\"analyze-it\"\n              type='button'\n              onClick={() => this.showAnalytics()}\n            >{this.props.showAnalytics ? 'Hide Analytics' : 'Show Analytics'}\n            </button>\n          </div>\n          {analytics}\n        </div >\n      );\n    } else if (adventure && !adventure.startVideoURL && !this.props.isEditing) {\n      if (this.props.currentAdventure.hasPassword) {\n        password = <span>This adventure is password protected</span>\n      }\n      return (\n        <div className='single-adventure-home'>\n          <div className='adventure-info'>\n            <h2 className=\"adventure-title\">{adventure.title}</h2>\n            <h3 className=\"info-category\">Adventure Intro</h3> <p>{adventure.startContent}</p>\n            {/* <h3 className=\"info-category\">Starting Scenario</h3> <p>{adventure.textContent}</p> */}\n            <h3 className=\"info-category\">Adventure Code:</h3> <p>{adventure.id}</p>\n            {password}\n            <div className=\"buttons\">\n              <button onClick={() => this.props.history.push(`/adventure/adventurebuilder/${adventure.id}`)} >Build your Adventure</button>\n              <button\n                type='button'\n                onClick={() => this.toggleAdventureEditForm()}\n              >Edit adventure  Info\n              </button>\n              {/* </div>\n              <div className='buttons'> */}\n              <button className=\"delete-it\"\n                type='button'\n                onClick={() => this.displayAdventureDeleting()}\n              >Delete adventure\n              </button>\n              <button className=\"analyze-it\"\n                type='button'\n                onClick={() => this.showAnalytics()}\n              >{this.props.showAnalytics ? 'Hide Analytics' : 'Show Analytics'}\n              </button>\n            </div>\n          </div>\n          {analytics}\n        </div>\n      );\n    } else {\n      return (\n        <EditAdventureForm />\n      );\n    }\n  }\n\n  render() {\n    return (\n      this.AdventureDetails()\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.auth;\n  // TO-DO ADD ADVENTURE STATE/STORE\n  return {\n    username: state.auth.currentUser.username,\n    name: `${currentUser.firstName} ${currentUser.lastName}`,\n    currentAdventure: state.adventure.currentAdventure,\n    isDeleting: state.adventure.isDeleting,\n    isEditing: state.adventure.isEditing,\n    showAnalytics: state.adventure.showAnalytics\n  };\n};\n\nexport default requiresLogin()(connect(mapStateToProps)(AdventureInfo));\n"]}