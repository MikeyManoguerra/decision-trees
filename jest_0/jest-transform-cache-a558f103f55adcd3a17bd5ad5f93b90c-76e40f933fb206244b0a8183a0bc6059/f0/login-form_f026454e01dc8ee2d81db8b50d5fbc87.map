{"version":3,"sources":["login-form.js"],"names":["LoginForm","React","Component","onSubmit","values","password","username","user","props","dispatch","render","error","handleSubmit","Input","required","nonEmpty","form","onSubmitFail","errors"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,SAAN,SAAwBC,eAAMC,SAA9B,CAAwC;AAEtCC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AAAA,QACTC,QADS,GACcD,MADd,CACTC,QADS;AAAA,QACCC,QADD,GACcF,MADd,CACCE,QADD;AAEf,QAAIC,IAAI,GAAG;AAAEF,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAX;AACA,WAAO,KAAKE,KAAL,CAAWC,QAAX,CAAoB,qBAAUF,IAAV,CAApB,CAAP;AACD;;AACDG,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAJ;;AACA,QAAI,KAAKH,KAAL,CAAWG,KAAf,EAAsB;AACpBA,MAAAA,KAAK,GACH;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,qBAAU,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKH,KAAL,CAAWG,KADd,CADF;AAKD;;AACD,WACE,6BAAC,eAAD;AAAM,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,YAAX,CAAwBR,MAAM,IAAI,KAAKD,QAAL,CAAcC,MAAd,CAAlC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,KADH,EAEE,6BAAC,gBAAD;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,SAAS,EAAC,6BAFZ;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,SAAS,EAAEE,cAJb;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,QAAQ,EAAE,CAACC,oBAAD,EAAWC,oBAAX,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAUE,6BAAC,gBAAD;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,SAAS,EAAC,4BAFZ;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,SAAS,EAAEF,cAJb;AAKE,MAAA,IAAI,EAAC,UALP;AAME,MAAA,QAAQ,EAAE,CAACC,oBAAD,EAAWC,oBAAX,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAiBE;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBF,CADF;AAoBD;;AApCqC;;eAuCzB,0BAAU;AACvBC,EAAAA,IAAI,EAAE,OADiB;AAEvBC,EAAAA,YAAY,EAAE,CAACC,MAAD,EAAST,QAAT,KACZA,QAAQ,CAAC,sBAAM;AAAO;AAAb,GAAD;AAHa,CAAV,EAKZT,SALY,C","sourcesContent":["import React from 'react';\nimport { Form, Field, reduxForm, focus } from 'redux-form';\nimport Input from \"./input\";\nimport { loginUser } from '../actions/auth';\nimport { required, nonEmpty } from \"../utils/validators\";\n\nclass LoginForm extends React.Component {\n\n  onSubmit(values) {\n    let { password, username } = values;\n    let user = { password, username };\n    return this.props.dispatch(loginUser(user))\n  }\n  render() {\n    let error;\n    if (this.props.error) {\n      error = (\n        <div className=\"form-error\" aria-live=\"polite\">\n          {this.props.error}\n        </div>\n      );\n    }\n    return (\n      <Form onSubmit={this.props.handleSubmit(values => this.onSubmit(values))}>\n        {error}\n        <Field\n          placeholder=\"Username\"\n          className=\"username input-field on-top\"\n          name=\"username\"\n          component={Input}\n          type=\"text\"\n          validate={[required, nonEmpty]}\n        />\n        <Field\n          placeholder=\"Password\"\n          className=\"password input-field below\"\n          name=\"password\"\n          component={Input}\n          type=\"password\"\n          validate={[required, nonEmpty]} />\n        <button className=\"login-button\">Login</button>\n      </Form>)\n  }\n}\n\nexport default reduxForm({\n  form: 'login',\n  onSubmitFail: (errors, dispatch) =>\n    dispatch(focus('login'/*, Object.keys(errors)[0]*/\n    ))\n})(LoginForm);"]}