{"version":3,"sources":["current-node-brancher.js"],"names":["CurrentNodeBrancher","React","Component","defineParentPointerForNewNode","parentInt","props","dispatch","editClicked","nodeId","currentNode","id","render","answerA","answerB","answerC","answerD","pointerA","pointerB","pointerC","pointerD","nodeTitle","title","showUpdate","question","count","mapStateToProps","state","loggedIn","auth","currentUser","adventureId","adventure","currentAdventure","node"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { nodeFormWithPointer } from '../actions/nodes';\nimport { toggleUpdateForm } from '../actions/nodes'\nimport UpdateNodeForm from './update-node-form'\n\nexport class CurrentNodeBrancher extends React.Component {\n  // if (!props.loggedIn) {\n  //   return <Redirect to=\"/\" />;\n  // }\n\n  defineParentPointerForNewNode(parentInt) {\n    return this.props.dispatch(nodeFormWithPointer(parentInt))\n  }\n\n  editClicked() {\n    let nodeId = this.props.currentNode.id\n    this.props.dispatch(toggleUpdateForm(nodeId))\n  }\n\n  render() {\n    let answerA;\n    let answerB;\n    let answerC;\n    let answerD;\n    if (this.props.currentNode.answerA) {\n      answerA = (<div className='brancher-answer-container'>\n        <div className='brancher-answer'><p>{this.props.currentNode.answerA}</p></div>\n        <div className='brancher-pointer'>\n          {this.props.currentNode.pointerA ? 'Already Accounted For!' :\n          <button\n            className=\"new-branch brancher-button\"\n            value='1'\n            onClick={() => this.defineParentPointerForNewNode(1)}>\n           New Branch\n         </button> \n          }\n        </div>\n      </div>)\n    }\n\n    if (this.props.currentNode.answerB) {\n      answerB = (<div className='brancher-answer-container'>\n        <div className='brancher-answer'><p>{this.props.currentNode.answerB}</p></div>\n        <div className='brancher-pointer'>\n          {this.props.currentNode.pointerB ? 'Already Accounted For!' :\n           <button\n            className=\"new-branch brancher-button\"\n            value='2'\n            onClick={() => this.defineParentPointerForNewNode(2)}>\n           New Branch\n         </button>\n          }\n        </div>\n      </div>)\n    }\n    if (this.props.currentNode.answerC) {\n      answerC = (<div className='brancher-answer-container'>\n        <div className='brancher-answer'>  <p>{this.props.currentNode.answerC}</p></div>\n        <div className='brancher-pointer'>\n          {this.props.currentNode.pointerC ? 'Already Accounted For!' :\n            <button\n              className=\"new-branch brancher-button\"\n              value='3'\n              onClick={() => this.defineParentPointerForNewNode(3)}>\n              NewBranch\n    </button>}\n        </div>\n      </div>)\n    }\n    if (this.props.currentNode.answerD) {\n      answerD = (<div className='brancher-answer-container'>\n        <div className='brancher-answer'> <p>{this.props.currentNode.answerD}</p></div>\n        <div className='brancher-pointer'>\n          {this.props.currentNode.pointerD ? 'Already Accounted For!' :\n           <button\n            className=\"new-branch brancher-button\"\n            value='4'\n            onClick={() => this.defineParentPointerForNewNode(4)}>\n            NewBranch\n         </button>\n          }\n        </div>\n      </div>)\n    }\n\n    let nodeTitle;\n    if (this.props.currentNode.title) {\n      nodeTitle = <h2>Current Node: {this.props.currentNode.title}</h2>\n    }\n\n    if (!this.props.showUpdate) {\n      return (\n        <div id=\"current-node-brancher\">\n          <div className='brancher-title'>{nodeTitle}</div>\n          <div className='brancher-question'>\n            <h3>{this.props.currentNode.question}</h3>\n          </div>\n          {answerA}\n          {answerB}\n          {answerC}\n          {answerD}\n          <div className='brancher-analytics'>\n            {/* TODO: add the parents that point to this node here? */}\n            <button className=\"edit-current-node\"\n              onClick={() => this.editClicked()}>Edit This Node</button>\n            <p>{this.props.currentNode.count ? `This node has been visited ${this.props.currentNode.count} times` : \"\"}</p>\n          </div>\n\n        </div>\n      )\n    } else {\n      return (\n        <UpdateNodeForm />\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  loggedIn: state.auth.currentUser !== null,\n  adventureId: state.adventure.adventureId,\n  adventure: state.adventure.currentAdventure,\n  currentNode: state.node.currentNode,\n  showUpdate: state.node.showUpdate\n});\n\nexport default withRouter(connect(mapStateToProps)(CurrentNodeBrancher));"]}