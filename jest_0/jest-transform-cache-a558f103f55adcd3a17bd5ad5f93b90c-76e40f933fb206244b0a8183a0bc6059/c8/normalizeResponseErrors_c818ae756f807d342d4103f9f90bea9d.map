{"version":3,"sources":["normalizeResponseErrors.js"],"names":["normalizeResponseErrors","res","ok","headers","has","get","startsWith","json","then","err","Promise","reject","code","status","message","statusText"],"mappings":";;;;;;;AAAO,MAAMA,uBAAuB,GAAGC,GAAG,IAAI;AAC5C,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,QACED,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,KACAH,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgB,cAAhB,EAAgCC,UAAhC,CAA2C,kBAA3C,CAFF,EAGE;AACA;AACA,aAAOL,GAAG,CAACM,IAAJ,GAAWC,IAAX,CAAgBC,GAAG,IAAIC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAvB,CAAP;AACD,KAPU,CAQX;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAe;AACpBC,MAAAA,IAAI,EAAEX,GAAG,CAACY,MADU;AAEpBC,MAAAA,OAAO,EAAEb,GAAG,CAACc;AAFO,KAAf,CAAP;AAID;;AACD,SAAOd,GAAP;AACD,CAhBM","sourcesContent":["export const normalizeResponseErrors = res => {\n  if (!res.ok) {\n    if (\n      res.headers.has('content-type') &&\n      res.headers.get('content-type').startsWith('application/json')\n    ) {\n      // We got a JSON error from our backend, let's decode it\n      return res.json().then(err => Promise.reject(err));\n    }\n    // Errors from backend are less informative\n    return Promise.reject({\n      code: res.status,\n      message: res.statusText\n    });\n  }\n  return res;\n};"]}