{"version":3,"sources":["analytics.js"],"names":["Analytics","React","Component","render","finishCount","dataArray","props","currentAdventure","nodes","map","node","ending","count","title","question","name","mapStateToProps","state","currentUser","auth","username","firstName","lastName","adventure","loading"],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;;;AAEO,MAAMA,SAAN,SAAwBC,eAAMC,SAA9B,CAAwC;AAE7CC,EAAAA,MAAM,GAAG;AACP,QAAIC,WAAW,GAAG,CAAlB;AACA,UAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4BC,KAA5B,CAAkCC,GAAlC,CAAsCC,IAAI,IAAI;AAC9D,UAAIA,IAAI,CAACC,MAAL,KAAgB,IAApB,EAA0B;AACxBP,QAAAA,WAAW,IAAIM,IAAI,CAACE,KAApB;AACD;;AACD,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACG,KAAlB,GAA0BH,IAAI,CAACI,QAApC,CADM,EAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOJ,IAAI,CAACE,KAAZ,CAAnD,CAFM,CAAR;AAID,KARiB,CAAlB;AAUA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACE,KAAKN,KAAL,CAAWC,gBAAX,CAA4BK,KAD9B,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACER,WADF,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,SADH,CARF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKC,KAAL,CAAWS,IAAlB,CADrC,MAXF,CADF;AAiBD;;AA/B4C;;;;AAkC/C,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA,QACvBC,WADuB,GACPD,KAAK,CAACE,IADC,CACvBD,WADuB;AAE/B,SAAO;AACLE,IAAAA,QAAQ,EAAEH,KAAK,CAACE,IAAN,CAAWD,WAAX,CAAuBE,QAD5B;AAELL,IAAAA,IAAI,EAAG,GAAEG,WAAW,CAACG,SAAU,IAAGH,WAAW,CAACI,QAAS,EAFlD;AAGLf,IAAAA,gBAAgB,EAAEU,KAAK,CAACM,SAAN,CAAgBhB,gBAH7B;AAILiB,IAAAA,OAAO,EAAEP,KAAK,CAACM,SAAN,CAAgBC;AAJpB,GAAP;AAMD,CARD;;eAUe,8BAAgB,yBAAQR,eAAR,EAAyBhB,SAAzB,CAAhB,C","sourcesContent":["\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport requiresLogin from './requires-login';\n\nexport class Analytics extends React.Component {\n\n  render() {\n    let finishCount = 0;\n    const dataArray = this.props.currentAdventure.nodes.map(node => {\n      if (node.ending === true) {\n        finishCount += node.count;\n      }\n      return (<li>\n        <h4>{node.title ? node.title : node.question}</h4>\n        <p>This nodes total number of visits by all users: <span>{node.count}</span></p>\n      </li>)\n    })\n\n    return (\n      <div>\n        <p>Adventure Start Count:\n         {this.props.currentAdventure.count}\n        </p>\n        <p>Adventure Completion Count:\n         {finishCount}\n        </p>\n        <h3> Number of visits per Node</h3>\n        <ul>\n          {dataArray}\n        </ul>\n        <p>\n          Way to build an awesome adventure, <span>{this.props.name}</span>!\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.auth;\n  return {\n    username: state.auth.currentUser.username,\n    name: `${currentUser.firstName} ${currentUser.lastName}`,\n    currentAdventure: state.adventure.currentAdventure,\n    loading: state.adventure.loading,\n  };\n};\n\nexport default requiresLogin()(connect(mapStateToProps)(Analytics));"]}